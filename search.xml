<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git-命令</title>
    <url>/2022/08/15/git-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h3><p>touch 创建<br>git init 创建仓库<br>git status 查看状态<br>git add .  全部到缓存区<br>git commit -m “注释”<br>git log    查看仓库<br>git-log    间接查看<br>git reset –hard commitID  回退<br>git reflog     操作记录<br>git branch   查看分支<br>git branch 名字<br>git checkout 名字  切换分之<br>git checkout -b  创建并切换<br>git merge 名字   合并分之<br>git branch -d b1 检查删除<br>git branch -D b1 强制删除<br>ssh-keygen -t rsa   创建ssh<br>cat ～/.ssh/id_rsa.pub 查看ssh<br>ssh -T <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#x65;&#101;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#x65;&#101;&#46;&#x63;&#x6f;&#109;</a> 查看链接的ssh    <br>git remote add 仓库名字（origin） 地址   链接仓库    <br>git remote rm 仓库名称<br>git remote    查看链接的仓库<br>git push -f –set-upstream 远端仓库 本地分支名:远端分支名      可以简化后面三个        -f:强制推送  –set-upstream :链接远端分支<br>git branch -vv 查看链接的远端分支<br>git clone ssh地址 本地目录<br>git fetch 《remote name》 《branch name》<br>git pull 《remote name》 《branch name》</p>
<p>仓库地址 <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x65;&#x65;&#46;&#99;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x65;&#x65;&#46;&#99;&#x6f;&#109;</a>:yyl1546139844/yyl.git</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>html</title>
    <url>/2022/08/15/html/</url>
    <content><![CDATA[<h1 id="html-css"><a href="#html-css" class="headerlink" title="html/css"></a>html/css</h1><h2 id="一-文本属性"><a href="#一-文本属性" class="headerlink" title="一.文本属性"></a>一.文本属性</h2><p>文字整体为上边距，下边距和文本。</p>
<h2 id="二-元素显示模式"><a href="#二-元素显示模式" class="headerlink" title="二.元素显示模式"></a>二.元素显示模式</h2><h3 id="行内元素，块元素，行内块元素"><a href="#行内元素，块元素，行内块元素" class="headerlink" title="行内元素，块元素，行内块元素"></a>行内元素，块元素，行内块元素</h3><p>行内元素：<code>&lt;h1&gt;&lt;p&gt;&lt;div&gt;&lt;ul&gt;&lt;ol&gt;&lt;li&gt;</code></p>
<p>块元素:<code>&lt;a&gt;&lt;strong&gt;&lt;b&gt;&lt;em&gt;&lt;del&gt;&lt;s&gt;&lt;ins&gt;&lt;u&gt;&lt;span&gt;</code></p>
<p>行内块元素：<code>&lt;img/&gt;&lt;input/&gt;&lt;td&gt;</code></p>
<h2 id="三-盒子模型"><a href="#三-盒子模型" class="headerlink" title="三.盒子模型"></a>三.盒子模型</h2><p>外边距，边框，内边距</p>
<p><img src="/2022/08/15/html/image-20220724224745320.png" alt="image-20220724224745320"></p>
<h2 id="四-布局方式"><a href="#四-布局方式" class="headerlink" title="四.布局方式"></a>四.布局方式</h2><p>普通流，浮动，定位</p>
<h3 id="1-普通流"><a href="#1-普通流" class="headerlink" title="1.普通流"></a>1.普通流</h3><h3 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2.浮动"></a>2.浮动</h3><p>特性：脱标，一行显示，行内块元素特性，搭配标准流的父元素。</p>
<p> 浮动的元素会压住后面的标准流，但不会影响前面的标准流。</p>
<p> 清除浮动：<code>clear：both</code>  可以让父元素检测到高度</p>
<p>1.额外标签法：在最后一个浮动元素后加<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></p>
<p>2.父元素添加<code>overflow：</code></p>
<p>3.after伪元素</p>
<p>4.双伪元素</p>
<h3 id="3-定位"><a href="#3-定位" class="headerlink" title="3.定位"></a>3.定位</h3><h4 id="1-定位模式"><a href="#1-定位模式" class="headerlink" title="1.定位模式"></a>1.定位模式</h4><p><img src="/2022/08/15/html/image-20220724224538160.png" alt="image-20220724224538160"></p>
<p><img src="/2022/08/15/html/image-20220724224506465.png" alt="image-20220724224506465"></p>
<h5 id="1-静态定位"><a href="#1-静态定位" class="headerlink" title="1.静态定位"></a>1.静态定位</h5><p><img src="/2022/08/15/html/image-20220725173118099.png" alt="image-20220725173118099"></p>
<h5 id="2-相对定位"><a href="#2-相对定位" class="headerlink" title="2.相对定位"></a>2.相对定位</h5><p><img src="/2022/08/15/html/image-20220725173251854.png" alt="image-20220725173251854"></p>
<h5 id="3-绝对定位"><a href="#3-绝对定位" class="headerlink" title="3.绝对定位"></a>3.绝对定位</h5><p><img src="/2022/08/15/html/image-20220725173538177.png" alt="image-20220725173538177"></p>
<h5 id="4-子绝父相"><a href="#4-子绝父相" class="headerlink" title="4.子绝父相"></a>4.子绝父相</h5><p><img src="/2022/08/15/html/image-20220725174011240.png" alt="image-20220725174011240"></p>
<h5 id="5-固定定位"><a href="#5-固定定位" class="headerlink" title="5.固定定位"></a>5.固定定位</h5><p><img src="/2022/08/15/html/image-20220725174932655.png"></p>
]]></content>
      <categories>
        <category>html</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>运行命令</title>
    <url>/2022/08/15/%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="win-r"><a href="#win-r" class="headerlink" title="win + r"></a>win + r</h1><p>gpedit.msc 本地组策略编辑器</p>
<p>regedit 注册表编辑器</p>
<p>shell：文件夹   打开</p>
<p>msconfig 系统配置</p>
<p>cmd 终端</p>
]]></content>
      <categories>
        <category>windows运行</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/2022/08/16/leetcode/</url>
    <content><![CDATA[<h5 id="1-两数相加"><a href="#1-两数相加" class="headerlink" title="1.两数相加"></a>1.两数相加</h5><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class count &#123;</span><br><span class="line">    public:</span><br><span class="line">    vector&lt;int&gt;twosum(vector&lt;int&gt; nums,int target)&#123;</span><br><span class="line">        int i,j;</span><br><span class="line">        i=0;j=1;</span><br><span class="line">        for(;i&lt;nums.size()-1;i++)&#123;</span><br><span class="line">            j=i+1;</span><br><span class="line">            for(;j&lt;nums.size();j++;</span><br><span class="line">                if (nums[i]+nums[j]==target)</span><br><span class="line">                 return &#123;i,j&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        return&#123;0,0&#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">int main() &#123;</span><br><span class="line">    vector&lt;int&gt; nums=&#123;2,9,5,2,3&#125;;</span><br><span class="line">    count y ;</span><br><span class="line">    vector&lt;int&gt; v=y.twosum(nums,5);</span><br><span class="line">    cout&lt;&lt;&#x27;&#123;&#x27;&lt;&lt;v[0]&lt;&lt;&#x27;,&#x27;&lt;&lt;v[1]&lt;&lt;&#x27;&#125;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h5><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0 开头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">struct ListNode&#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    ListNode() : val(0),next(nullptr)&#123;&#125;</span><br><span class="line">    ListNode(int x) :val(x),next(nullptr)&#123;&#125;</span><br><span class="line">    ListNode (int x,ListNode *next) : val(x) ,next(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public:</span><br><span class="line">    ListNode* addTwoNumbers(ListNode*l1,ListNode*l2)&#123;</span><br><span class="line">        int y =0;</span><br><span class="line">        ListNode*p=l1;</span><br><span class="line">        ListNode*q=l2;</span><br><span class="line">        ListNode*head =new ListNode;</span><br><span class="line">        head -&gt;val =0 ;</span><br><span class="line">        head -&gt;next =nullptr;</span><br><span class="line">        ListNode*m=head;</span><br><span class="line">        while (q!=nullptr &amp;&amp; p!=nullptr) &#123;</span><br><span class="line">        if (p-&gt;val + q-&gt;val+y &gt;=10 )&#123;</span><br><span class="line"></span><br><span class="line">        int a = p-&gt;val + q-&gt;val+y;</span><br><span class="line">        a =a%10;</span><br><span class="line">        ListNode*n = new ListNode;</span><br><span class="line">        n-&gt;val=a;</span><br><span class="line">        n-&gt;next=nullptr;</span><br><span class="line">        m-&gt;next=n;</span><br><span class="line">        m=n;</span><br><span class="line">        y =1;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">        int a = p-&gt;val + q-&gt;val+y;</span><br><span class="line">        ListNode*n = new ListNode;</span><br><span class="line">        n-&gt;val=a;</span><br><span class="line">        n-&gt;next=nullptr;</span><br><span class="line">        m-&gt;next=n;</span><br><span class="line">        m=n;</span><br><span class="line">        y=0;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (p==nullptr &amp;&amp;q!=nullptr)&#123;</span><br><span class="line">           while(q!=nullptr)&#123;</span><br><span class="line">                if (q-&gt;val+y &gt;=10 )&#123;</span><br><span class="line">    </span><br><span class="line">                 int a = q-&gt;val+y;</span><br><span class="line">                 a =a%10;</span><br><span class="line">                 ListNode*n = new ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=nullptr;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y =1;</span><br><span class="line">                 q=q-&gt;next;</span><br><span class="line">                                        &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">    </span><br><span class="line">                 int a = q-&gt;val+y;</span><br><span class="line">                 ListNode*n = new ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=nullptr;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y=0;</span><br><span class="line">                 q=q-&gt;next;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (p!=nullptr &amp;&amp; q==nullptr) &#123;</span><br><span class="line">                   while(p!=nullptr)&#123;</span><br><span class="line">                if (p-&gt;val+y &gt;=10 )&#123;</span><br><span class="line">    </span><br><span class="line">                 int a = p-&gt;val+y;</span><br><span class="line">                 a =a%10;</span><br><span class="line">                 ListNode*n = new ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=nullptr;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y =1;</span><br><span class="line">                 p=p-&gt;next;</span><br><span class="line">                                        &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">    </span><br><span class="line">                 int a = p-&gt;val+y;</span><br><span class="line">                 ListNode*n = new ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=nullptr;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y=0;</span><br><span class="line">                 p=p-&gt;next;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">        if(y==0)</span><br><span class="line">        &#123;&#125;</span><br><span class="line">        else &#123;</span><br><span class="line">                int a = y;</span><br><span class="line">                 ListNode*n = new ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=nullptr;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y=0;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    if (y==1) &#123;</span><br><span class="line">                    int a = y;</span><br><span class="line">                 ListNode*n = new ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=nullptr;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y=0;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;&#125;</span><br><span class="line">        </span><br><span class="line">    ListNode*l3=head-&gt;next;</span><br><span class="line">    delete(head);</span><br><span class="line">    return l3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3-最长字串"><a href="#3-最长字串" class="headerlink" title="3.最长字串"></a>3.最长字串</h5><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public:</span><br><span class="line">     int lengthOfLongestSubstring(string s) &#123;</span><br><span class="line">        int i=0 ,j=1,n=1,m=0;</span><br><span class="line">        while (s[i]!=&#x27;\0&#x27;) &#123;</span><br><span class="line">        while (s[j]!=&#x27;\0&#x27;) &#123;</span><br><span class="line">         int a=0;</span><br><span class="line">        for (int l=i; l&lt;j; l++) &#123;</span><br><span class="line">        if (s[l]==s[j]) &#123;</span><br><span class="line">        a =0;</span><br><span class="line">        break;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">        a =1;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a==1) &#123;</span><br><span class="line">        n=n+1;</span><br><span class="line">        j++;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">        break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n&gt;m) &#123;</span><br><span class="line">        m=n;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        if (j==i) &#123;</span><br><span class="line">        j=j+1;</span><br><span class="line">        n=1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">        n=n-1;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h5 id="4-中位数"><a href="#4-中位数" class="headerlink" title="4.中位数"></a>4.中位数</h5><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。算法的时间复杂度应该为 O(log (m+n)) 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Solution &#123;</span><br><span class="line">  public:</span><br><span class="line">    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        vector&lt;int&gt; sum;</span><br><span class="line">        int m = 0, n = 0;</span><br><span class="line">        if ((nums1.size() + nums2.size()) % 2 == 0) &#123;</span><br><span class="line">            for (int i = 0; i &lt;= (nums1.size() + nums2.size()) / 2; i++) &#123;</span><br><span class="line">                if (m &lt; nums1.size() &amp;&amp; n &lt; nums2.size()) &#123;</span><br><span class="line">                    if (nums1[m] &gt; nums2[n]) &#123;</span><br><span class="line">                        sum.push_back(nums2[n]);</span><br><span class="line">                        n++;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        sum.push_back(nums1[m]);</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if (m &lt; nums1.size() &amp;&amp; n &gt;= nums2.size()) &#123;</span><br><span class="line">                    sum.push_back(nums1[m]);</span><br><span class="line">                    m++;</span><br><span class="line">                &#125; else if (m &gt;= nums1.size() &amp;&amp; n &lt; nums2.size()) &#123;</span><br><span class="line">                    sum.push_back(nums2[n]);</span><br><span class="line">                    n++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return (double((sum[sum.size() - 1] + sum[sum.size() - 2])) / 2);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; (nums1.size() + nums2.size() + 1) / 2; i++) &#123;</span><br><span class="line">                if (m &lt; nums1.size() &amp;&amp; n &lt; nums2.size()) &#123;</span><br><span class="line">                    if (nums1[m] &gt; nums2[n]) &#123;</span><br><span class="line">                        sum.push_back(nums2[n]);</span><br><span class="line">                        n++;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        sum.push_back(nums1[m]);</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else if (m &lt; nums1.size() &amp;&amp; n &gt;= nums2.size()) &#123;</span><br><span class="line">                    sum.push_back(nums1[m]);</span><br><span class="line">                    m++;</span><br><span class="line">                &#125; else if (n &lt; nums2.size() &amp;&amp; m &gt;= nums1.size()) &#123;</span><br><span class="line">                    sum.push_back(nums2[n]);</span><br><span class="line">                    n++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return (sum[(nums1.size() + nums2.size() - 1) / 2]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="5-回文子串"><a href="#5-回文子串" class="headerlink" title="5.回文子串"></a>5.回文子串</h5><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string longestPalindrome(string s) &#123;</span><br><span class="line">        string s1=s;</span><br><span class="line">        string ls;</span><br><span class="line">        for (int i=0; s[i]!=&#x27;\0&#x27;; i++) &#123;</span><br><span class="line">        for (int j=i+ls.size(); j&lt;s.size()&amp;&amp;s[j]!=&#x27;\0&#x27;; j++) &#123;</span><br><span class="line">        int n=i;</span><br><span class="line">        memcpy(&amp;s1[0],&amp;s[i], j-i+1);</span><br><span class="line">        int m=j-i;</span><br><span class="line">        n=i;</span><br><span class="line">        for (; m&gt;=0; ) &#123;</span><br><span class="line">        if (s1[m]==s[n]) &#123;n++;m--;&#125;</span><br><span class="line">        else &#123;break;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">       if (m&gt;=0) &#123;&#125;</span><br><span class="line">       else  &#123;</span><br><span class="line">        if (ls.size()&lt;j-i+1) &#123;</span><br><span class="line">           ls=s1.substr(0,j-i+1);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ls;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="6-z字型排列"><a href="#6-z字型排列" class="headerlink" title="6.z字型排列"></a>6.z字型排列</h5><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。请你实现这个将字符串进行指定行数变换的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    string convert(string s, int numRows) &#123;</span><br><span class="line">        if (numRows==1)</span><br><span class="line">        return s;</span><br><span class="line">        string s1=s;</span><br><span class="line">        int i=0;</span><br><span class="line">        int m=0;</span><br><span class="line">        while (1) &#123;</span><br><span class="line">        if (2*m*(numRows-1)&lt;s.size()) </span><br><span class="line">        s1[i]=s[2*m*(numRows-1)];</span><br><span class="line">        else</span><br><span class="line">         break;</span><br><span class="line">        i++;</span><br><span class="line">        m++;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int j=1; j&lt;numRows-1; j++) &#123;</span><br><span class="line">        m=0;</span><br><span class="line">        int n=numRows-j;</span><br><span class="line">         while (1) &#123;</span><br><span class="line">        if (2*m*(numRows-1)+j&lt;s.size()) </span><br><span class="line">        s1[i]=s[2*m*(numRows-1)+j];</span><br><span class="line">        else</span><br><span class="line">         break;</span><br><span class="line">        i++;</span><br><span class="line">        if (2*(n-1)+2*m*(numRows-1)+j&lt;s.size()) </span><br><span class="line">        s1[i]=s[2*(n-1)+2*m*(numRows-1)+j];</span><br><span class="line">        else</span><br><span class="line">         break;</span><br><span class="line">         i++;</span><br><span class="line">         m++;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m=0;</span><br><span class="line">         while (1) &#123;</span><br><span class="line">        if (2*m*(numRows-1)+numRows-1&lt;s.size()) </span><br><span class="line">        s1[i]=s[2*m*(numRows-1)+numRows-1];</span><br><span class="line">        else</span><br><span class="line">         break;</span><br><span class="line">        i++;</span><br><span class="line">        m++;</span><br><span class="line">        &#125;</span><br><span class="line">        return s1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
</search>
