<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git-命令</title>
    <url>./2022/08/15/git-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h3><p>touch 创建<br>git init 创建仓库<br>git status 查看状态<br>git add .  全部到缓存区<br>git commit -m “注释”<br>git log    查看仓库<br>git-log    间接查看<br>git reset –hard commitID  回退<br>git reflog     操作记录<br>git branch   查看分支<br>git branch 名字<br>git checkout 名字  切换分之<br>git checkout -b  创建并切换<br>git merge 名字   合并分之<br>git branch -d b1 检查删除<br>git branch -D b1 强制删除<br>ssh-keygen -t rsa   创建ssh<br>cat ～/.ssh/id_rsa.pub 查看ssh<br>ssh -T <a href="mailto:&#x67;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x65;&#x65;&#x2e;&#99;&#111;&#x6d;">&#x67;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x65;&#x65;&#x2e;&#99;&#111;&#x6d;</a> 查看链接的ssh    <br>git remote add 仓库名字（origin） 地址   链接仓库    <br>git remote rm 仓库名称<br>git remote    查看链接的仓库<br>git push -f –set-upstream 远端仓库 本地分支名:远端分支名      可以简化后面三个        -f:强制推送  –set-upstream :链接远端分支<br>git branch -vv 查看链接的远端分支<br>git clone ssh地址 本地目录<br>git fetch 《remote name》 《branch name》<br>git pull 《remote name》 《branch name》</p>
<p>仓库地址 <a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x65;&#101;&#46;&#99;&#111;&#109;">&#103;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#x65;&#101;&#46;&#99;&#111;&#109;</a>:yyl1546139844/yyl.git</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>html</title>
    <url>./2022/08/15/html/</url>
    <content><![CDATA[<h1 id="html-css"><a href="#html-css" class="headerlink" title="html/css"></a>html/css</h1><h2 id="一-文本属性"><a href="#一-文本属性" class="headerlink" title="一.文本属性"></a>一.文本属性</h2><p>文字整体为上边距，下边距和文本。</p>
<h2 id="二-元素显示模式"><a href="#二-元素显示模式" class="headerlink" title="二.元素显示模式"></a>二.元素显示模式</h2><h3 id="行内元素，块元素，行内块元素"><a href="#行内元素，块元素，行内块元素" class="headerlink" title="行内元素，块元素，行内块元素"></a>行内元素，块元素，行内块元素</h3><p>行内元素：<code>&lt;h1&gt;&lt;p&gt;&lt;div&gt;&lt;ul&gt;&lt;ol&gt;&lt;li&gt;</code></p>
<p>块元素:<code>&lt;a&gt;&lt;strong&gt;&lt;b&gt;&lt;em&gt;&lt;del&gt;&lt;s&gt;&lt;ins&gt;&lt;u&gt;&lt;span&gt;</code></p>
<p>行内块元素：<code>&lt;img/&gt;&lt;input/&gt;&lt;td&gt;</code></p>
<h2 id="三-盒子模型"><a href="#三-盒子模型" class="headerlink" title="三.盒子模型"></a>三.盒子模型</h2><p>外边距，边框，内边距</p>
<p><img src="https://tucang.cc/api/image/show/86de1bd5a56c77dace13eac588be9365"></p>
<h2 id="四-布局方式"><a href="#四-布局方式" class="headerlink" title="四.布局方式"></a>四.布局方式</h2><p>普通流，浮动，定位</p>
<h3 id="1-普通流"><a href="#1-普通流" class="headerlink" title="1.普通流"></a>1.普通流</h3><h3 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2.浮动"></a>2.浮动</h3><p>特性：脱标，一行显示，行内块元素特性，搭配标准流的父元素。</p>
<p> 浮动的元素会压住后面的标准流，但不会影响前面的标准流。</p>
<p> 清除浮动：<code>clear：both</code>  可以让父元素检测到高度</p>
<p>1.额外标签法：在最后一个浮动元素后加<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></p>
<p>2.父元素添加<code>overflow：</code></p>
<p>3.after伪元素</p>
<p>4.双伪元素</p>
<h3 id="3-定位"><a href="#3-定位" class="headerlink" title="3.定位"></a>3.定位</h3><h4 id="1-定位模式"><a href="#1-定位模式" class="headerlink" title="1.定位模式"></a>1.定位模式</h4><p><img src="https://tucang.cc/api/image/show/75cd9b392b93190f65992c0c996590d3"></p>
<p><img src="https://tucang.cc/api/image/show/75cd9b392b93190f65992c0c996590d3"></p>
<h5 id="1-静态定位"><a href="#1-静态定位" class="headerlink" title="1.静态定位"></a>1.静态定位</h5><p><img src="https://tucang.cc/api/image/show/a83ace0e7e56e70530011ccff064f59f"></p>
<h5 id="2-相对定位"><a href="#2-相对定位" class="headerlink" title="2.相对定位"></a>2.相对定位</h5><p><img src="https://tucang.cc/api/image/show/f6fde91a3fab2fd7357a9186564dda5b"></p>
<h5 id="3-绝对定位"><a href="#3-绝对定位" class="headerlink" title="3.绝对定位"></a>3.绝对定位</h5><p><img src="https://tucang.cc/api/image/show/c6e5652f4a341ac8699f36f3105bebde"></p>
<h5 id="4-子绝父相"><a href="#4-子绝父相" class="headerlink" title="4.子绝父相"></a>4.子绝父相</h5><p><img src="https://tucang.cc/api/image/show/1d35f4aead1f802690804729057f8c02"></p>
<h5 id="5-固定定位"><a href="#5-固定定位" class="headerlink" title="5.固定定位"></a>5.固定定位</h5><p><img src="https://tucang.cc/api/image/show/ff98a8fbd70d16d3344579865c44e403"></p>
]]></content>
      <categories>
        <category>html</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>./2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="Hexo零基础搭建个人博客"><a href="#Hexo零基础搭建个人博客" class="headerlink" title="Hexo零基础搭建个人博客"></a>Hexo零基础搭建个人博客</h3><p>Hexo是一个基于 node.js的快速生成静态博客的开源框架,支持 Markdown和大多数 Octopress<br>插件,一个命令即可部署到 Github页面、 Giteee、 Heroku等,强大的APl,可无限扩展,拥有<br>数百个主题和插件。</p>
<h4 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h4><p>1、安装Node.js<br>直接到官网上下载安装即可<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
<p>Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)<br>Node自带npm<br>2、安装Git<br>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.<br>Mac：使用 Homebrew, <a href="https://www.macports.org/">MacPorts</a> 或者下载 安装程序。<br>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code><br>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.png"></p>
<p>npm下载慢的话也可以下载淘宝下载源cnpm</p>
<p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<h4 id="二、开始安装Hexo"><a href="#二、开始安装Hexo" class="headerlink" title="二、开始安装Hexo"></a>二、开始安装Hexo</h4><p>1、安装hexo(cd进入到你要创立博客的文件内)<br><code>npm install -g hexo-cli</code><br><code>或者</code><br><code>cnpm install -g hexo-cli</code><br>安装完成可输入hexo -v查看版本</p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.png"></p>
<p>2、初始化hexo，新建存储博客的文件夹<br><code>hexo init myblog</code></p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3.png"></p>
<p>3、进入文件夹，安装一下npm<br>cd myblog<br>npm install<br>可以看到我们的hexo站点就已经安装好了，接下来就可以直接启动他了</p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.png"></p>
<p>4、启动服务站点<br><code>hexo g</code><br><code>hexo server</code></p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5.png"></p>
<p>访问<a href="http://localhost:4000/">http://localhost:4000/</a> 至此hero就搭建好了。可以在本地访问了</p>
<h4 id="三、Gitee上建站访问"><a href="#三、Gitee上建站访问" class="headerlink" title="三、Gitee上建站访问"></a>三、Gitee上建站访问</h4><p>可在github或者gitee上建站，gitee国内访问快一些</p>
<p>1、新建仓库<br>仓库名和路径格式必须是：用户名 只有这样，将来要部署到Gite e page的时候，才会被识别.</p>
<p>2、将hexo博客站点上传到gitee上<br>这里需要安装一个hexo的上传插件deploy-git</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>3、修改hexo配置文件指定仓库路径<br>可在文件夹中直接打开文件，也可通过vim直接编辑</p>
<p>找到Deployment加上（注意空格）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 你的仓库路径</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/7.png"></p>
<p>在URL中找到url地址改为<a href="https://gitee.com/XXX/XXX.git">https://gitee.com/XXX/XXX.git</a>     XXX为你的用户名</p>
<p>在url 下面添加 <code>root: ./XXX</code>     XXX为你的用户名</p>
<p>4、推送hexo站点文件<br>之后就可以推送博客站点到gitee上了</p>
<p>推送命令<br><code>hexo d</code><br>扩展：</p>
<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code> 部署文章，可以用<code>hexo d</code>缩写</p>
<p>推送中会要求输入gitee的用户名和密码（如果不想每次都输可以<a href="/2022/08/18/%E9%85%8D%E7%BD%AEssh/" title="配置ssh">配置ssh</a>，我这里就不做演示了）</p>
<p>然后就可以看到gitee上有推上来的文件了</p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/8.png"></p>
<p>5、配置Pages服务<br>目前我们站点还无法访问需要开启Gitee Pages（gitee需要开启，github不需要）</p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/9.png"></p>
<p>审核通过启动我们就可以访问啦。</p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/10.png"></p>
<p>gitee上传新文件之后，需要手动更新一下，更新后的页面才会生效</p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/11.png"></p>
<p>多说一句：如果觉得这个访问路径太长了，我们可以去买一个域名，将该路径绑定到域名上，即可通过域名访问了。</p>
<h4 id="四、GitHub上建站访问"><a href="#四、GitHub上建站访问" class="headerlink" title="四、GitHub上建站访问"></a>四、GitHub上建站访问</h4><p>在gitee上建站发现有限制条件，所有也可以采用github建站的方式。</p>
<p>步骤和gitee一样。</p>
<p>1、新建guthub仓库<br>仓库名称限制了为你的：用户名+.github.io</p>
<p>2、安装hexo上传插件<br><code>npm install hexo-deployer-git --save</code><br>3、修改hexo配置文件指定仓库路径<br>可在文件夹中直接打开文件，也可通过vim直接编辑</p>
<p><code>vim _config.yml #找到Deploymentdeploy:  type: git  repo: 你的github仓库路径  branch: master</code><br><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/12.png"></p>
<p>4、推送站点到github<br><code>推送命令hexo d</code><br>推送过程中需要输入你的github用户名和密码。但是在2021年8月14日开始github官方就加强安全访问。不能通过原有账号密码git访问，密码需要用官方的token或者采用ssh公私钥访问。否则会出现鉴权失败（用户名密码错误）</p>
<p>解决方式就是获取token，登录github设置setting-&gt;Developer Settings-&gt;Prosonal access tokens 创建一个新token。然后就可以拿这个token当密码输入了。用户名和token输入后，上传成功。</p>
<p>建议使用<a href="/2022/08/18/%E9%85%8D%E7%BD%AEssh/" title="配置ssh">配置ssh</a></p>
<h4 id="5、尝试访问"><a href="#5、尝试访问" class="headerlink" title="5、尝试访问"></a>5、尝试访问</h4><p>输入你的仓库名称,即可访问成功。</p>
<p><a href="https://xxx.github.io/">https://XXX.github.io/</a></p>
<h4 id="五、更换主题"><a href="#五、更换主题" class="headerlink" title="五、更换主题"></a>五、更换主题</h4><p>到GitHub上搜索hexo主题或者hero自带的主题<a href="https://hexo.io/themes/%E3%80%82">https://hexo.io/themes/。</a></p>
<p>1、找一个喜欢的。</p>
<p>按照各自的主题文档上面一步步操作即可。</p>
<p>一般步骤：</p>
<p>1、下载解压2、放到主题包themes文件夹下面3、在hero配置文件_config.yml中修改为喜欢主题的名字4、hero server启动即可访问</p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/13.png"></p>
<h4 id="六、更新仓库"><a href="#六、更新仓库" class="headerlink" title="六、更新仓库"></a>六、更新仓库</h4><p>本地调试完之后。就可以更新到github上了</p>
<p>//清理hexo clean//构建静态文件hexo g//上传至仓库hexo d</p>
<h4 id="七、写文章"><a href="#七、写文章" class="headerlink" title="七、写文章"></a>七、写文章</h4><p>在站点文件夹中打开 git ，输入hexo new 博客名称。hexo会在source文件夹下_posts的创建一个markdowm的文件。这就是你要编写的文章。</p>
<p>在上传更新到github上立马能够查看到。</p>
<p>//清理hexo clean//构建静态文件hexo g//上传至仓库(上传报错多位网络原因，多上传几次即可)hexo d</p>
<p>草稿箱<br>很多时候我们需要先写成草稿，而暂时不发布出去。draft page就可以满足我们的要求，我们的网站上是看不到草稿文件的。</p>
<p>//新建草稿文件hexo new draft b//预览草稿文件hexo server –draft//发布草稿hexo publish b</p>
<h4 id="八、新建页面"><a href="#八、新建页面" class="headerlink" title="八、新建页面"></a>八、新建页面</h4><p>有时我们不满足主题自由的一些页面，希望自己添加一些页面。</p>
<p>我们可以新建页面,新建页面则会在hexo的source中新建该页面文件并生成md文件，这就是你要编辑的博客页了。</p>
<p><code>hexo new page &quot;resouces&quot;</code></p>
<p>然后打开主题的配置文件_config.yml，在菜单属性menu中的添加如下（注意不是Hexo的配置文件）</p>
<p>将页面路径联接到页面上去</p>
<p>菜单自定义名称：/生成的页面名称</p>
<p><img src="/2022/08/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/14.png"></p>
<p>当我们点击资源时后会跳转到我们自定义的博客页了</p>
<h4 id="九、常见问题"><a href="#九、常见问题" class="headerlink" title="九、常见问题"></a>九、常见问题</h4><h5 id="1-文章插入图片"><a href="#1-文章插入图片" class="headerlink" title="1.文章插入图片"></a>1.文章插入图片</h5><p>1.设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true<br>安装插件:<code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code><br>运行hexo n “XXXXXX”,生成XXXXX.md博文时就会在/source/_posts目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。<br>添加图片:在想添加的位置写入<code>![](图片名字),例如![](1.png)</code>。</p>
<h5 id="2-文章内跳转另一篇文章"><a href="#2-文章内跳转另一篇文章" class="headerlink" title="2.文章内跳转另一篇文章"></a>2.文章内跳转另一篇文章</h5><p><code>&#123;%post_link 文章名称(不加后缀) 显示文字%&#125;</code></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>./2022/08/16/leetcode/</url>
    <content><![CDATA[<h5 id="1-两数相加"><a href="#1-两数相加" class="headerlink" title="1.两数相加"></a>1.两数相加</h5><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">count</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">twosum</span>(vector&lt;<span class="type">int</span>&gt; nums,<span class="type">int</span> target)&#123;</span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        i=<span class="number">0</span>;j=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;nums.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            j=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;j&lt;nums.<span class="built_in">size</span>();j++;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]+nums[j]==target)</span><br><span class="line">                 <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="built_in">main</span>() &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums=&#123;<span class="number">2</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    count y ;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v=y.<span class="built_in">twosum</span>(nums,<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&#x27;&#123;&#x27;</span>&lt;&lt;v[<span class="number">0</span>]&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;v[<span class="number">1</span>]&lt;&lt;<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h5><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。请你将两个数相加，并以相同形式返回一个表示和的链表。你可以假设除了数字 0 之外，这两个数都不会以 0 开头</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line">    <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) :<span class="built_in">val</span>(x),<span class="built_in">next</span>(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">    <span class="built_in">ListNode</span> (<span class="type">int</span> x,ListNode *next) : <span class="built_in">val</span>(x) ,<span class="built_in">next</span>(next)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode*l1,ListNode*l2)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> y =<span class="number">0</span>;</span><br><span class="line">        ListNode*p=l1;</span><br><span class="line">        ListNode*q=l2;</span><br><span class="line">        ListNode*head =<span class="keyword">new</span> ListNode;</span><br><span class="line">        head -&gt;val =<span class="number">0</span> ;</span><br><span class="line">        head -&gt;next =<span class="literal">nullptr</span>;</span><br><span class="line">        ListNode*m=head;</span><br><span class="line">        <span class="keyword">while</span> (q!=<span class="literal">nullptr</span> &amp;&amp; p!=<span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;val + q-&gt;val+y &gt;=<span class="number">10</span> )&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> a = p-&gt;val + q-&gt;val+y;</span><br><span class="line">        a =a%<span class="number">10</span>;</span><br><span class="line">        ListNode*n = <span class="keyword">new</span> ListNode;</span><br><span class="line">        n-&gt;val=a;</span><br><span class="line">        n-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        m-&gt;next=n;</span><br><span class="line">        m=n;</span><br><span class="line">        y =<span class="number">1</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="type">int</span> a = p-&gt;val + q-&gt;val+y;</span><br><span class="line">        ListNode*n = <span class="keyword">new</span> ListNode;</span><br><span class="line">        n-&gt;val=a;</span><br><span class="line">        n-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">        m-&gt;next=n;</span><br><span class="line">        m=n;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p==<span class="literal">nullptr</span> &amp;&amp;q!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">           <span class="keyword">while</span>(q!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (q-&gt;val+y &gt;=<span class="number">10</span> )&#123;</span><br><span class="line">    </span><br><span class="line">                 <span class="type">int</span> a = q-&gt;val+y;</span><br><span class="line">                 a =a%<span class="number">10</span>;</span><br><span class="line">                 ListNode*n = <span class="keyword">new</span> ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y =<span class="number">1</span>;</span><br><span class="line">                 q=q-&gt;next;</span><br><span class="line">                                        &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">                 <span class="type">int</span> a = q-&gt;val+y;</span><br><span class="line">                 ListNode*n = <span class="keyword">new</span> ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y=<span class="number">0</span>;</span><br><span class="line">                 q=q-&gt;next;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p!=<span class="literal">nullptr</span> &amp;&amp; q==<span class="literal">nullptr</span>) &#123;</span><br><span class="line">                   <span class="keyword">while</span>(p!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;val+y &gt;=<span class="number">10</span> )&#123;</span><br><span class="line">    </span><br><span class="line">                 <span class="type">int</span> a = p-&gt;val+y;</span><br><span class="line">                 a =a%<span class="number">10</span>;</span><br><span class="line">                 ListNode*n = <span class="keyword">new</span> ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y =<span class="number">1</span>;</span><br><span class="line">                 p=p-&gt;next;</span><br><span class="line">                                        &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">                 <span class="type">int</span> a = p-&gt;val+y;</span><br><span class="line">                 ListNode*n = <span class="keyword">new</span> ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y=<span class="number">0</span>;</span><br><span class="line">                 p=p-&gt;next;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(y==<span class="number">0</span>)</span><br><span class="line">        &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> a = y;</span><br><span class="line">                 ListNode*n = <span class="keyword">new</span> ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (y==<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> a = y;</span><br><span class="line">                 ListNode*n = <span class="keyword">new</span> ListNode;</span><br><span class="line">                 n-&gt;val=a;</span><br><span class="line">                 n-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">                 m-&gt;next=n;</span><br><span class="line">                 m=n;</span><br><span class="line">                 y=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">        </span><br><span class="line">    ListNode*l3=head-&gt;next;</span><br><span class="line">    <span class="built_in">delete</span>(head);</span><br><span class="line">    <span class="keyword">return</span> l3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3-最长字串"><a href="#3-最长字串" class="headerlink" title="3.最长字串"></a>3.最长字串</h5><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public:</span><br><span class="line">     int lengthOfLongestSubstring(string s) &#123;</span><br><span class="line">        int i=0 ,j=1,n=1,m=0;</span><br><span class="line">        while (s[i]!=&#x27;\0&#x27;) &#123;</span><br><span class="line">        while (s[j]!=&#x27;\0&#x27;) &#123;</span><br><span class="line">         int a=0;</span><br><span class="line">        for (int l=i; l&lt;j; l++) &#123;</span><br><span class="line">        if (s[l]==s[j]) &#123;</span><br><span class="line">        a =0;</span><br><span class="line">        break;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">        a =1;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (a==1) &#123;</span><br><span class="line">        n=n+1;</span><br><span class="line">        j++;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">        break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n&gt;m) &#123;</span><br><span class="line">        m=n;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        if (j==i) &#123;</span><br><span class="line">        j=j+1;</span><br><span class="line">        n=1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">        n=n-1;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return m;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h5 id="4-中位数"><a href="#4-中位数" class="headerlink" title="4.中位数"></a>4.中位数</h5><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。算法的时间复杂度应该为 O(log (m+n)) 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums1, vector&lt;<span class="type">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; sum;</span><br><span class="line">        <span class="type">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((nums1.<span class="built_in">size</span>() + nums2.<span class="built_in">size</span>()) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= (nums1.<span class="built_in">size</span>() + nums2.<span class="built_in">size</span>()) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m &lt; nums1.<span class="built_in">size</span>() &amp;&amp; n &lt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums1[m] &gt; nums2[n]) &#123;</span><br><span class="line">                        sum.<span class="built_in">push_back</span>(nums2[n]);</span><br><span class="line">                        n++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sum.<span class="built_in">push_back</span>(nums1[m]);</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m &lt; nums1.<span class="built_in">size</span>() &amp;&amp; n &gt;= nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    sum.<span class="built_in">push_back</span>(nums1[m]);</span><br><span class="line">                    m++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m &gt;= nums1.<span class="built_in">size</span>() &amp;&amp; n &lt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    sum.<span class="built_in">push_back</span>(nums2[n]);</span><br><span class="line">                    n++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">double</span>((sum[sum.<span class="built_in">size</span>() - <span class="number">1</span>] + sum[sum.<span class="built_in">size</span>() - <span class="number">2</span>])) / <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (nums1.<span class="built_in">size</span>() + nums2.<span class="built_in">size</span>() + <span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (m &lt; nums1.<span class="built_in">size</span>() &amp;&amp; n &lt; nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nums1[m] &gt; nums2[n]) &#123;</span><br><span class="line">                        sum.<span class="built_in">push_back</span>(nums2[n]);</span><br><span class="line">                        n++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sum.<span class="built_in">push_back</span>(nums1[m]);</span><br><span class="line">                        m++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m &lt; nums1.<span class="built_in">size</span>() &amp;&amp; n &gt;= nums2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    sum.<span class="built_in">push_back</span>(nums1[m]);</span><br><span class="line">                    m++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; nums2.<span class="built_in">size</span>() &amp;&amp; m &gt;= nums1.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                    sum.<span class="built_in">push_back</span>(nums2[n]);</span><br><span class="line">                    n++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (sum[(nums1.<span class="built_in">size</span>() + nums2.<span class="built_in">size</span>() - <span class="number">1</span>) / <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="5-回文子串"><a href="#5-回文子串" class="headerlink" title="5.回文子串"></a>5.回文子串</h5><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string s1=s;</span><br><span class="line">        string ls;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; s[i]!=<span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=i+ls.<span class="built_in">size</span>(); j&lt;s.<span class="built_in">size</span>()&amp;&amp;s[j]!=<span class="string">&#x27;\0&#x27;</span>; j++) &#123;</span><br><span class="line">        <span class="type">int</span> n=i;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;s1[<span class="number">0</span>],&amp;s[i], j-i+<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> m=j-i;</span><br><span class="line">        n=i;</span><br><span class="line">        <span class="keyword">for</span> (; m&gt;=<span class="number">0</span>; ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[m]==s[n]) &#123;n++;m--;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">if</span> (m&gt;=<span class="number">0</span>) &#123;&#125;</span><br><span class="line">       <span class="keyword">else</span>  &#123;</span><br><span class="line">        <span class="keyword">if</span> (ls.<span class="built_in">size</span>()&lt;j-i+<span class="number">1</span>) &#123;</span><br><span class="line">           ls=s1.<span class="built_in">substr</span>(<span class="number">0</span>,j-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ls;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="6-z字型排列"><a href="#6-z字型排列" class="headerlink" title="6.z字型排列"></a>6.z字型排列</h5><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。请你实现这个将字符串进行指定行数变换的函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numRows==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">        string s1=s;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>*m*(numRows<span class="number">-1</span>)&lt;s.<span class="built_in">size</span>()) </span><br><span class="line">        s1[i]=s[<span class="number">2</span>*m*(numRows<span class="number">-1</span>)];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">        m++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>; j&lt;numRows<span class="number">-1</span>; j++) &#123;</span><br><span class="line">        m=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=numRows-j;</span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>*m*(numRows<span class="number">-1</span>)+j&lt;s.<span class="built_in">size</span>()) </span><br><span class="line">        s1[i]=s[<span class="number">2</span>*m*(numRows<span class="number">-1</span>)+j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>*(n<span class="number">-1</span>)+<span class="number">2</span>*m*(numRows<span class="number">-1</span>)+j&lt;s.<span class="built_in">size</span>()) </span><br><span class="line">        s1[i]=s[<span class="number">2</span>*(n<span class="number">-1</span>)+<span class="number">2</span>*m*(numRows<span class="number">-1</span>)+j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">         i++;</span><br><span class="line">         m++;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span>*m*(numRows<span class="number">-1</span>)+numRows<span class="number">-1</span>&lt;s.<span class="built_in">size</span>()) </span><br><span class="line">        s1[i]=s[<span class="number">2</span>*m*(numRows<span class="number">-1</span>)+numRows<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">        i++;</span><br><span class="line">        m++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="7-数字反转"><a href="#7-数字反转" class="headerlink" title="7.数字反转"></a>7.数字反转</h5><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。假设环境不允许存储 64 位整数（有符号或无符号）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ts=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">2147483647</span>;</span><br><span class="line">        <span class="type">int</span> min=<span class="number">-2147483648</span>;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="keyword">while</span> (x!=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ts&gt;max/<span class="number">10</span>||ts&lt;min/<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        t=x%<span class="number">10</span>;</span><br><span class="line">        ts=ts*<span class="number">10</span>+t;</span><br><span class="line">        x=x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  ts;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>运行命令</title>
    <url>./2022/08/15/%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="win-r"><a href="#win-r" class="headerlink" title="win + r"></a>win + r</h1><p>gpedit.msc 本地组策略编辑器</p>
<p>regedit 注册表编辑器</p>
<p>shell：文件夹   打开</p>
<p>msconfig 系统配置</p>
<p>cmd 终端</p>
<p>services.msc  本地服务</p>
]]></content>
      <categories>
        <category>windows运行</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>配置ssh</title>
    <url>./2022/08/18/%E9%85%8D%E7%BD%AEssh/</url>
    <content><![CDATA[<p>1.生成ssh公钥</p>
<p><code>ssh-keygen -t rsa</code></p>
<p>回车</p>
<p>2.获取公钥</p>
<p><code>cat ~/.ssh/id_rsa.pub</code></p>
<p>3.gitee或github设置账户公钥</p>
<p>gitee:设置    安全设置    SSH公钥</p>
<p>github:setting    SSH and GPG keys   new ssh key</p>
<p>4.验证是否成功</p>
<p><code>ssh -T git@gitee.com</code></p>
<p><code>ssh -T git@github.com</code></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA</title>
    <url>./2022/09/18/JAVA/</url>
    <content><![CDATA[<p>一.第一段程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span>&#123;                            <span class="comment">//文件名字要与类名相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二.变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">num</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">byte</span> num2=<span class="number">35</span>;      <span class="comment">//字节型      1个字节   -128~127</span></span><br><span class="line">        <span class="type">short</span> num3=<span class="number">50</span>;     <span class="comment">//短整型      2个字节   -32768~32767</span></span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>;       <span class="comment">//整形        4个字节   -2^31~2^31-1</span></span><br><span class="line">        <span class="type">long</span> num4=<span class="number">3000000L</span>;<span class="comment">//长整型      8个字节   -2^63~2^63-1      后面要加L</span></span><br><span class="line">        <span class="type">float</span> numm5=<span class="number">2.5F</span>;  <span class="comment">//单精度浮点数  4个字节   1.4013E-45~3.4028E+38  后边要加F</span></span><br><span class="line">        <span class="type">double</span> num6=<span class="number">1.2</span>;   <span class="comment">//双精度浮点型   8个字节  4.9E-324~1.7977E+308</span></span><br><span class="line">        <span class="type">char</span> zifu1=<span class="string">&#x27;S&#x27;</span>;    <span class="comment">//字符型        2个字节  0~65535</span></span><br><span class="line">        <span class="type">boolean</span> var1=<span class="literal">true</span>; <span class="comment">//布尔类型      一个字节  true false</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三.数据转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">num</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//自动转换:</span></span><br><span class="line">        <span class="type">long</span> num1=<span class="number">100</span>;     <span class="comment">//右边int 类型比左边数据范围小.自动转为long</span></span><br><span class="line">        <span class="type">double</span> num2=<span class="number">2.5F</span>;  <span class="comment">//右边float 类型比左边数据范围小.自动转为double</span></span><br><span class="line">        <span class="type">float</span> num3=<span class="number">30L</span> ;   <span class="comment">//右边long 类型比左边数据范围小.自动转为float</span></span><br><span class="line">        <span class="comment">//强制转换:</span></span><br><span class="line">        <span class="type">int</span> num=(<span class="type">int</span>) <span class="number">100L</span>;<span class="comment">//强制转换</span></span><br><span class="line">        a+=<span class="number">2</span>               <span class="comment">//a=a+2</span></span><br><span class="line">        a&gt;b ? a:b          <span class="comment">//若前边为真则取a;否则取b</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>四.方法的定义与调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">four</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        printf();                           <span class="comment">//方法调用</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printf</span><span class="params">()</span>&#123;            <span class="comment">//方法定义</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;    <span class="comment">//返回int类型</span></span><br><span class="line">        <span class="type">int</span> sum=a+b;</span><br><span class="line">        <span class="keyword">return</span> sum;                         <span class="comment">//返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span> <span class="title function_">sum</span><span class="params">(<span class="type">byte</span> a,<span class="type">byte</span> b)</span>&#123; <span class="comment">//函数重载   只和名字和参数相同 要求名字相同但参数不同(数量,类型等)</span></span><br><span class="line">        <span class="type">byte</span> sum=(<span class="type">byte</span>)(a+b);</span><br><span class="line">        <span class="keyword">return</span> sum; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>五.选择语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ifelse</span>&#123;                            <span class="comment">//文件名字要与类名相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//if:</span></span><br><span class="line">    <span class="keyword">if</span>()                     <span class="comment">//若满足条件则执行后面的语句</span></span><br><span class="line">    &#123;&#125;                 </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>()</span><br><span class="line">    &#123;&#125;                       <span class="comment">//若满足条件则执行后面的语句</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">     <span class="comment">//switch:</span></span><br><span class="line">     <span class="keyword">switch</span>(<span class="number">5</span>)&#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>六.循环语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ifelse</span>&#123;                          </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//while:</span></span><br><span class="line">    <span class="type">int</span> val=<span class="number">0</span>,nums=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(++val&lt;=<span class="number">10</span>)           <span class="comment">//循环十次</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums+=val;             <span class="comment">// nums = nums + val;</span></span><br><span class="line">        <span class="keyword">if</span>(val==<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;             <span class="comment">//break 跳出循环</span></span><br><span class="line">        <span class="keyword">if</span>(val==<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">continue</span>;         <span class="comment">//continue 结束本次循环,开始下次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(std::cin&gt;&gt;val)</span><br><span class="line">        nums+=val;            <span class="comment">//循环一直进行直达遇到 文件结束符或者错误</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for循环</span></span><br><span class="line">    <span class="type">int</span> nums=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> val= <span class="number">1</span>;val&lt;=<span class="number">10</span>;++val)</span><br><span class="line">        nums+=val;</span><br><span class="line">    <span class="comment">//do...while:</span></span><br><span class="line">    <span class="keyword">do</span>&#123;&#125;<span class="keyword">while</span>()               <span class="comment">//至少进行一次循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>七.数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">array</span>&#123;</span><br><span class="line">    pubiic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> [] array1=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">100</span>];           <span class="comment">//动态初始化存一百个int 的数组</span></span><br><span class="line">        <span class="type">int</span> [] array2=<span class="keyword">new</span> <span class="title class_">int</span> [] &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;    <span class="comment">//静态初始化</span></span><br><span class="line">        <span class="type">int</span> [] array3=&#123;<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;               <span class="comment">//静态初始化省略</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">let</span> <span class="operator">=</span>array.length;                 <span class="comment">//数组长度</span></span><br><span class="line">        classname [] array=<span class="keyword">new</span> <span class="title class_">classname</span>[<span class="number">3</span>];   <span class="comment">//对象数组</span></span><br><span class="line">        <span class="type">classname</span> <span class="variable">one</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">classname</span>();</span><br><span class="line">        array[<span class="number">0</span>]=one;                          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>八.动态数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&#123;</span><br><span class="line">    pubiic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">	ArrayList&lt;string&gt; list =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();       <span class="comment">//构造动态数组</span></span><br><span class="line">    list.add(<span class="string">&quot;三天后&quot;</span>);                               <span class="comment">//从最后面插入元素</span></span><br><span class="line">        基本类型      包装类</span><br><span class="line">          <span class="type">byte</span>     Byte</span><br><span class="line">          <span class="type">short</span>    Short</span><br><span class="line">          <span class="type">int</span>       Integer</span><br><span class="line">          <span class="type">long</span>      Long</span><br><span class="line">          <span class="type">float</span>     Float</span><br><span class="line">          <span class="type">double</span>    Double</span><br><span class="line">          <span class="type">char</span>       Character</span><br><span class="line">          <span class="type">boolean</span>    Boolean </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>九.字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">string</span>&#123;</span><br><span class="line">    pubiic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     1.字符串不可变</span></span><br><span class="line"><span class="comment">     2.字符串可共享</span></span><br><span class="line"><span class="comment">     3.字符串表现为char []数组,但实际上底层原理是byte[] 数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     构造方法</span></span><br><span class="line"><span class="comment">     1.public String()                        //构造空字符串</span></span><br><span class="line"><span class="comment">     2.public String(char [] array)           //使用字符数组创建,地址指向字符数组再指向byte[]</span></span><br><span class="line"><span class="comment">     3.public String(byte [] array)</span></span><br><span class="line"><span class="comment">     4.string char=&quot;afhjg&quot;                    //地址指向字符串常量池,再指向字符数组再指向byte[]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     使用方法</span></span><br><span class="line"><span class="comment">     1.public boolean equals(object obj)      //比较</span></span><br><span class="line"><span class="comment">     2.public int Length()                    //获取长度</span></span><br><span class="line"><span class="comment">     3.public String concat(String str)       //拼接字符串</span></span><br><span class="line"><span class="comment">     4.public char charAt(int index)          //获取指定位置字符串</span></span><br><span class="line"><span class="comment">     5.public int indexOf(String str)         //查找子串出现位置</span></span><br><span class="line"><span class="comment">     6.public String substring(int index)     //从参数位置开始截取到尾部</span></span><br><span class="line"><span class="comment">     7.public String substring(int begin,int end)//截取范围内字符串,前闭后开</span></span><br><span class="line"><span class="comment">     8.public char[] toCharArray()             //转换成Char数组</span></span><br><span class="line"><span class="comment">     9.public byte getBytes()                  //获取底层byte数组</span></span><br><span class="line"><span class="comment">     10.public String replace(CharSequencr oldString,CharSequencr NewString)//替换</span></span><br><span class="line"><span class="comment">     11.public String[] split(String reget)    //按指定参数分割字符串       &quot;,&quot; &quot; &quot;  //.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>十.类和对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line">	<span class="comment">/*封装性 继承性 多态性*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1.所有成员变量都要用private</span></span><br><span class="line"><span class="comment">      2.成员变量的set和get函数</span></span><br><span class="line"><span class="comment">      3.无参构造函数            不写会赠送</span></span><br><span class="line"><span class="comment">      4.全参构造函数*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span>&#123;                        <span class="comment">//定义类 </span></span><br><span class="line">    String name;                             <span class="comment">//属性定义在方法外面</span></span><br><span class="line">    <span class="type">int</span> age=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rage;                        <span class="comment">// 类外无法直接访问 通过定义方法间接访问</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> classroom;                    <span class="comment">//静态类型</span></span><br><span class="line">    <span class="built_in">this</span>.name;                               <span class="comment">//指类内的属性值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;                      <span class="comment">//方法不加static</span></span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat1</span><span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;eat1&quot;</span>);         <span class="comment">//静态方法可以通过  student.eat1直接访问</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">student</span><span class="params">()</span>&#123;&#125;                      <span class="comment">//无参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;    <span class="comment">//有参构造函数</span></span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;System.out.println(<span class="string">&quot;第一次构造&quot;</span>);&#125; <span class="comment">//静态代码块在第一次构造时唯一使用一次</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。</span></span><br><span class="line"><span class="comment">例如：身体和心脏的关系。又如：汽车和发动机的关系。</span></span><br><span class="line"><span class="comment">分类：</span></span><br><span class="line"><span class="comment">1.成员内部类</span></span><br><span class="line"><span class="comment">2.局部内部类（包含匿名内部类）</span></span><br><span class="line"><span class="comment">成员内部类的定义格式：</span></span><br><span class="line"><span class="comment">修饰符class外部类名称f</span></span><br><span class="line"><span class="comment">修饰符class内部类名称f</span></span><br><span class="line"><span class="comment">注意：内用外，随意访问；外用内，需要内部类对象。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*继承特点: 单一继承性 多级继承性 多子类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">senerstudent</span> extend studend&#123;   <span class="comment">//定义子类继承父类</span></span><br><span class="line">    <span class="type">int</span> age=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> age=<span class="number">40</span>;</span><br><span class="line">    		System.out.println(age);       <span class="comment">//方法中的40</span></span><br><span class="line">            System.out.println(<span class="built_in">this</span>.age);  <span class="comment">//类中的30</span></span><br><span class="line">            System.out.println(<span class="built_in">super</span>.age); <span class="comment">//父类的20</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">senerstudent</span><span class="params">()</span>&#123;                 <span class="comment">//子类无参构造</span></span><br><span class="line">        <span class="built_in">super</span>();                           <span class="comment">//调用父类有参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">senerstudent</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;    <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">50</span>)                   <span class="comment">//调用父类有参构造函数</span></span><br><span class="line">    <span class="built_in">this</span>.name=name;</span><br><span class="line">    <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*方法覆盖重写的注意事项</span></span><br><span class="line"><span class="comment">		1.必须保证父子类之间方法的名称相同，参数列表也相同</span></span><br><span class="line"><span class="comment">		@override：写在方法前面，用来检测是不是有效的正确覆盖重写</span></span><br><span class="line"><span class="comment">		这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。</span></span><br><span class="line"><span class="comment">		2.子类方法的返回值必须【小于等于】父类方法的返回值范围。</span></span><br><span class="line"><span class="comment">		小扩展提示：java.lang.object类是所有类的公共最高父类（祖宗类），java.lang.string就是object的子类</span></span><br><span class="line"><span class="comment">		3.子类方法的权限必须【大于等于】类方法的权限修饰符。</span></span><br><span class="line"><span class="comment">		小扩展提示：public&gt;protected&gt;（default）&gt;private</span></span><br><span class="line"><span class="comment">		备注：（default）不是关键字default，而是什么都不写，留空。*/</span></span><br><span class="line">    <span class="comment">/*继承关系中，父子类构造方法的访问特点：</span></span><br><span class="line"><span class="comment">	1.子类构造方法当中有一个默认隐含的“super（）调用，所以一定是先调用的父类构造，后执行的子类构造。</span></span><br><span class="line"><span class="comment">	2.子类构造可以通过super关键字来调用父类重载构造。</span></span><br><span class="line"><span class="comment">	3.super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。</span></span><br><span class="line"><span class="comment">	总结：</span></span><br><span class="line"><span class="comment">	子类必须调用父类构造方法，不写则赠送super（）；写了则用写的指定的super调用，super只能有一个，还必须是第一个*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*多态性*/</span></span><br><span class="line"><span class="comment">/*代码当中体现多态性，其实就是一句话：父类引用指向子类对象。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">父类概称对象名=new子类名称（）；</span></span><br><span class="line"><span class="comment">或者：</span></span><br><span class="line"><span class="comment">接口名称</span></span><br><span class="line"><span class="comment">对象名=new实现类名称（）；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*在多态的代码当中，成员方法的访问规则是：</span></span><br><span class="line"><span class="comment">看new的是谁，就优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment">口诀：编译看左边，运行看右边。</span></span><br><span class="line"><span class="comment">对比一下：</span></span><br><span class="line"><span class="comment">成员变量：</span></span><br><span class="line"><span class="comment">编译看左边，运行还看左边。</span></span><br><span class="line"><span class="comment">成员方法：编译看左边，运行看右边。*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String【】args)</span>&#123;</span><br><span class="line"><span class="comment">//使用多态的写法</span></span><br><span class="line"><span class="comment">//左侧父类的引用，指向了右侧子类的对象</span></span><br><span class="line">Fu obj= <span class="keyword">new</span> <span class="title class_">zi</span>（）;                     <span class="comment">//多态性</span></span><br><span class="line">obj.method（）;                         <span class="comment">//zi fu 都有 用子</span></span><br><span class="line">obj.methodFu（）;                       <span class="comment">//子无用父</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*如果不用多态，只用子类，那么写法是：</span></span><br><span class="line"><span class="comment">Teacher one new Teacher();</span></span><br><span class="line"><span class="comment">one.work():/∥讲课</span></span><br><span class="line"><span class="comment">Assistant two new Assistant();</span></span><br><span class="line"><span class="comment">two.work():/∥辅导</span></span><br><span class="line"><span class="comment">我现在唯一要做的事情，就是调用work方法，其他的功能不关心。</span></span><br><span class="line"><span class="comment">如果使用多态的写法，对比一下：</span></span><br><span class="line"><span class="comment">Employee one new TeacherO;</span></span><br><span class="line"><span class="comment">one,work():/∥讲课</span></span><br><span class="line"><span class="comment">Employee two new AssistantO;</span></span><br><span class="line"><span class="comment">two.work();/∥辅导</span></span><br><span class="line"><span class="comment">好处：无论右边new的时候换成哪个子类对象，等号左边调用方法都不会变化。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用类</span></span><br><span class="line"><span class="keyword">import</span> 路径.student                         <span class="comment">//导入包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">std</span>&#123;                           </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">static</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">student</span> <span class="variable">std</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">student</span>();       <span class="comment">//使用无参构造函数定义对象</span></span><br><span class="line">        std.name=<span class="string">&quot;阿凡达&quot;</span>;                  <span class="comment">//定义对象属性</span></span><br><span class="line">        std.age=<span class="number">100</span>;</span><br><span class="line">        std.eat();                         <span class="comment">//使用对象方法</span></span><br><span class="line">        student std1= <span class="keyword">new</span> <span class="title class_">student</span>(<span class="string">&quot;阿发说&quot;</span>,<span class="number">12</span>);<span class="comment">//使用全参构造函数定义对象</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>十一.抽象类和抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束。</span></span><br><span class="line"><span class="comment">抽象类：抽象方法所在的类，必须是抽象类才行。在class,之前写上abstract即可。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="comment">//这是一个抽象方法，代表吃东西，但是具体吃什么（大括号的内容）不确定。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> eat（）;</span><br><span class="line"><span class="comment">//这是普通的成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> normalMethod（）&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如何使用抽象类和抽象方法：</span></span><br><span class="line"><span class="comment">1.不能直接创建new抽象类对象</span></span><br><span class="line"><span class="comment">2.必须用一个子类来继承抽象父类。</span></span><br><span class="line"><span class="comment">3.子类必须覆盖重写抽象父类当中所有的抽象方法。</span></span><br><span class="line"><span class="comment">覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</span></span><br><span class="line"><span class="comment">4.创建子类对象进行使用。|*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> eat（）</span><br><span class="line">System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>十二.转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>对象的向上转型，其实就是多态写法：</span><br><span class="line">格式：父类名称对象名=<span class="keyword">new</span>子类名称():</span><br><span class="line">Animal animal <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">含义：右侧创建一个子类对象，把它当做父类来看待使用。</span><br><span class="line">创建了一只猫，当做动物看待，没问题。</span><br><span class="line">注意事项：向上转型一定是安全的。从小范围转向了大范围，从小范围的猫，向上转换成为更大范围的动物。</span><br><span class="line">    </span><br><span class="line">向上转型一定是安全的，没有问题的，正确的。但是也有一个弊端：</span><br><span class="line">对象一旦向上转型为父类，那么就无法调用子类原本特有的内容。</span><br><span class="line">解决方案：用对象的向下转型[还原]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>对象的向下转型，其实是一个【还原】的动作。</span><br><span class="line">格式：子类名称对象名=（子类名称父类对象：</span><br><span class="line">含义：将父类对象，</span><br><span class="line">【还原】成为本来的子类对象。</span><br><span class="line">Animal animal=<span class="keyword">new</span> <span class="title class_">Cat</span>():/本来是猫，向上转型成为动物</span><br><span class="line">Catcat=(Cat)animal;;/∥本来是猫，已经被当做动物了，还原回来成为本来的猫</span><br><span class="line">注意事项：</span><br><span class="line">.必须保证对象本来创建的时候，就是猫，才能向下转型成为猫。</span><br><span class="line">b.如果对象创建的时候本来不是猫，现在非要向下转型成为猫，就会报错。ClassCastException</span><br><span class="line">    </span><br><span class="line">如何才能知道一个父类引用的对象，本来是什么子类？</span><br><span class="line">格式：</span><br><span class="line">对象<span class="keyword">instanceof</span>类名称</span><br><span class="line">这将会得到一个<span class="type">boolean</span>值结果，也就是判断前面的对象能不能当做后面类型的实例。</span><br></pre></td></tr></table></figure>



<p>十三.接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口就是多个类的公共规范。</span></span><br><span class="line"><span class="comment">接口是一种引用数据类型，最重要的内容就是其中的：抽象方法。</span></span><br><span class="line"><span class="comment">如何定义一个接口的格式：</span></span><br><span class="line"><span class="comment">public interface接口名称&#123;</span></span><br><span class="line"><span class="comment">//接口内容</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">备注：换成了关键字interface.之后，编译生成的字节码文件仍然是：。java--&gt;.class.</span></span><br><span class="line"><span class="comment">如果是Java7,那么接口中可以包含的内容有：</span></span><br><span class="line"><span class="comment">1.常量</span></span><br><span class="line"><span class="comment">2.抽象方法</span></span><br><span class="line"><span class="comment">如果是Java8,还可以额外包含有：</span></span><br><span class="line"><span class="comment">3.默认方法</span></span><br><span class="line"><span class="comment">4.静态方法</span></span><br><span class="line"><span class="comment">果是JavaT9,还可以额外包含有：</span></span><br><span class="line"><span class="comment">5.私有方法*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*接口使用步骤：</span></span><br><span class="line"><span class="comment">1.接口不能直接使用，必须有一个实现类来实现该接口。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public class 实现类名称 implements 接口名称()</span></span><br><span class="line"><span class="comment">2.</span></span><br><span class="line"><span class="comment">接口的实现类必须覆盖重写（实现）接口中所有的抽象方法。</span></span><br><span class="line"><span class="comment">实现：去掉abstract关键字，加上方法体大括号。</span></span><br><span class="line"><span class="comment">3.</span></span><br><span class="line"><span class="comment">创建实现类的对象，进行使用。</span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">如果实现类并没有覆盖重写接口中所有的抽象方法，那么这个实现类自己就必须是抽象类。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.接口的默认方法，可以通过接口实现类对象，直接调用</span></span><br><span class="line"><span class="comment">2.接口的默认方法，也可以被接口实现类进行覆盖重写。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*注意事项：不能通过接口实现类的对象来调用接口当中的静态方法。</span></span><br><span class="line"><span class="comment">正确用法：通过接口名称，直接调用其中的静态方法。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">接口名称。静态方法名（参数）；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用接口的时候，需要注意：</span></span><br><span class="line"><span class="comment">1.接口是没有静态代码块或者构造方法的。</span></span><br><span class="line"><span class="comment">2.</span></span><br><span class="line"><span class="comment">一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。</span></span><br><span class="line"><span class="comment">格式</span></span><br><span class="line"><span class="comment">public cLass MyInterfaceImpl implements MyInterfaceA,MyInterfaceB</span></span><br><span class="line"><span class="comment">//覆盖重写所有抽象方法</span></span><br><span class="line"><span class="comment">3.</span></span><br><span class="line"><span class="comment">如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可。</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类。</span></span><br><span class="line"><span class="comment">5.</span></span><br><span class="line"><span class="comment">如果实现类锁实现的多个接口当中，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写。</span></span><br><span class="line"><span class="comment">6.</span></span><br><span class="line"><span class="comment">一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.类与类之间是单继承的。直接父类只有一个。</span></span><br><span class="line"><span class="comment">2.类与接口之间是多实现的。一个类可以实现多个接口。</span></span><br><span class="line"><span class="comment">3.接口与接口之间是多继承的。</span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">1.多个父接口当中的抽象方法如果重复，梁关系。</span></span><br><span class="line"><span class="comment">2.多个父接口当中的默认方法如果重复，邪么子接口必须进行默认方法的覆盖重写，[而且带着defaulti关键字]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">usb</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在任何版本的Java中，接口都能定义抽象方法。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public abstract返回值类型方法名称（参数列表）；</span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">1.接口当中的抽象方法，修饰符必须是两个固定的关键字：public abstract</span></span><br><span class="line"><span class="comment">2.这两个关键字修饰符，可以选择性地省略。(今天刚学，所以不推荐。)</span></span><br><span class="line"><span class="comment">3.</span></span><br><span class="line"><span class="comment">方法的三要素，可以随意定义。*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>;          <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>;                   <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>;                 <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span>;                          <span class="comment">//抽象方法</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">/*从Java8开始，接口里允许定义默认方法。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public default返回值类型方法名称（参数列表）&#123;方法体&#125;</span></span><br><span class="line"><span class="comment">备注：接口当中的默认方法，可以解决接口升级的问题。*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">m5</span><span class="params">()</span>&#123;&#125;          <span class="comment">//默认方法        调用默认方法如果当前类中没有就会向上找</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*从]ava8开始，接口当中允许定义静态方法</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public static返回值类型方法名称（参数列表）&#123;&#125;</span></span><br><span class="line"><span class="comment">方法体</span></span><br><span class="line"><span class="comment">提示：就是将abstract或者default换成static即可，带上方法体。*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m6</span><span class="params">()</span>&#123;&#125;           <span class="comment">//静态方法         不能通过类的对象调用只能通过接口名称直接调用</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*问题描述：</span></span><br><span class="line"><span class="comment">我们需要抽取一个共有方法，用来解决两个默认方法之间重复代码的问题。</span></span><br><span class="line"><span class="comment">但是这个共有方法不应该让实现类使用，应该是私有化的。</span></span><br><span class="line"><span class="comment">解决方案：</span></span><br><span class="line"><span class="comment">从Java9开始，接口当中允许定义私有方法。</span></span><br><span class="line"><span class="comment">1.普通私有方法，解决多个默认方法之间重复代码问题</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">private返回值类型方法名称（参数列表）&#123;</span></span><br><span class="line"><span class="comment">方法体&#125;</span></span><br><span class="line"><span class="comment">2.</span></span><br><span class="line"><span class="comment">静态私有方法，解决多个静态方法之闸重复代码问题</span></span><br><span class="line"><span class="comment">棉式：</span></span><br><span class="line"><span class="comment">private static返回值类型方法名称（参数列表）&#123;</span></span><br><span class="line"><span class="comment">方法体&#125;*/</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/*接口当中也可以定义“成员变量”，但是必须使用public static final三个关键字进行修饰。</span></span><br><span class="line"><span class="comment">从效果上看，这其实就是接口的【常量】。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public static final数据类型常量名称=数据值；</span></span><br><span class="line"><span class="comment">备注：</span></span><br><span class="line"><span class="comment">旦使用final关键字进行修饰，说明不可改变。</span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">1.</span></span><br><span class="line"><span class="comment">接口当中的常量，可以省略public static final,注意：不写也照样是这样。</span></span><br><span class="line"><span class="comment">2.接口当中的常量，必须进行赋值；不能不赋值。</span></span><br><span class="line"><span class="comment">3.接口中常量的名称，使用完全大写的字母，用下划线进行分隔。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//这其实就是一个常量，一旦赋值，不可以修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> NUM_OF_MYCLASS <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>十四.this和super专题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*super关键字的用法有三种：</span></span><br><span class="line"><span class="comment">1.在子类的成员方法中，访问父类的成员变量。</span></span><br><span class="line"><span class="comment">2. 在子类的成员方法中，访问父类的成员方法。</span></span><br><span class="line"><span class="comment">3.在子类的构造方法中，访问父类的构造方法。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*supe关键字用来访问父类内容，而this关键字用来访问本类内容。用法也有三种：</span></span><br><span class="line"><span class="comment">1.在本类的成员方法中，访问本类的成员变量。</span></span><br><span class="line"><span class="comment">2.在本类的成员方法中，访问本类的另一个成员方法。</span></span><br><span class="line"><span class="comment">3.在本类的构造方法中，访问本类的另一个构造方法。</span></span><br><span class="line"><span class="comment">在第三种用法当中要注意：</span></span><br><span class="line"><span class="comment">4.this(..·)调用也必须是构造方法的第一个语句，唯一一个。</span></span><br><span class="line"><span class="comment">3.superi和this两种构造调用，不能同时使用。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>十五.final专题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*finali关键字代表最终、不可改变的。</span></span><br><span class="line"><span class="comment">常见四种用法：</span></span><br><span class="line"><span class="comment">1.</span></span><br><span class="line"><span class="comment">可以用来修饰一个类</span></span><br><span class="line"><span class="comment">2.可以用来修饰一个方法</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">还可以用来修饰一个局部变量</span></span><br><span class="line"><span class="comment">4.</span></span><br><span class="line"><span class="comment">还可以用来修饰一个成员变量*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*当final关键字用来修饰一个类的时候，格式：</span></span><br><span class="line"><span class="comment">public final class类名称f</span></span><br><span class="line"><span class="comment">.</span></span><br><span class="line"><span class="comment">含义：当前这个类不能有任何的子类。（太监类）</span></span><br><span class="line"><span class="comment">注意：一个类如果是fina(的，那么其中所有的成员方法都无法进行覆盖重写（因为没儿子。)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当fial关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">修饰符final</span></span><br><span class="line"><span class="comment">返回值类型方法名称（参数列表）&#123;</span></span><br><span class="line"><span class="comment">/方法体</span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">对于类、方法来说，abstracti关键字和final:关键字不能同时使用，因为矛盾。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*对于局部变量来说</span></span><br><span class="line"><span class="comment">如果类型是基本类型那么不可变的是类型的值</span></span><br><span class="line"><span class="comment">如果类型是引用类型那么不可变的是类型的地址*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">对于成员变量来说，如果使用final关键字修饰，那么这个变量也照样是不可变。</span></span><br><span class="line"><span class="comment">1.由于成员变量具有默认值，所以用了final.之后必须手动赋值，不会再给默认值了。</span></span><br><span class="line"><span class="comment">2.对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。</span></span><br><span class="line"><span class="comment">3.</span></span><br><span class="line"><span class="comment">必须保证类当中所有重载的构造方法，都最终会对fna的成员变量进行赋值。*/</span></span><br></pre></td></tr></table></figure>

<p>十六.public protect  default private static final abstract</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、修饰方法的修饰符</span><br><span class="line"><span class="keyword">public</span>:被该修饰符修饰的方法可以被任何类通过对象.方法使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:被该修饰符修饰的方法可以被该类自身、本包中的类、和子类（是子类而非父类）所使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:被该修饰符修饰的方法只能被该类使用</span><br><span class="line"></span><br><span class="line">缺省：被该修饰符修饰的方法只能被该类、本包中的类所使用（缺省的意思就是不用写）</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>：被<span class="keyword">static</span>修饰的方法是一个静态方法，可以被类直接使用，可以通过类名.方法名直接调用,<span class="keyword">static</span>可以和<span class="keyword">final</span>一起使用(在类中修饰的<span class="keyword">static</span>方法可以被对象和类名调用,但是在接口中定义的<span class="keyword">static</span>方法只能通过接口名调用)</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span>：被<span class="keyword">abstract</span>修饰的方法，不能写方法体，且该类必须是抽象类,抽象类中可以没有抽象方法，但是有抽象方法的类必须是一个抽象类</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span>：被该修饰符修饰的方法不能被重写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、修饰类的修饰符</span><br><span class="line"><span class="keyword">public</span>：被<span class="keyword">public</span>修饰的类可以被任何类所使用（本包、其他包、自身）</span><br><span class="line"></span><br><span class="line">缺省：缺省的意思就是不写权限访问控制符，被此修饰符修饰的类只能被该类自身，本包中的类所使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span>：被此修饰符修饰的类是一个抽象类，抽象类是不能被实例化的，(抽象类主要是用来被继承的)，<span class="keyword">abstract</span>不能和<span class="keyword">final</span>同时修饰一个类</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span>：用<span class="keyword">final</span>修饰的类表示最终类，该类不能被继承，且该类也不能是一个抽象类</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、修饰成员变量的修饰符</span><br><span class="line"><span class="keyword">public</span>:被该修饰符修饰的成员变量可以被任何类使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:被该修饰符修饰的成员变量能被该类自身、本包中的类、和子类（是子类而非父类）所使用，即用<span class="keyword">protected</span>修饰的属性在其他包中的子类中可以通过子类对象进行访问，不能通过本类对象进行访问</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:被该修饰符修饰的成员变量只能被该类使用</span><br><span class="line"></span><br><span class="line">缺省：被该修饰符修饰的成员变量只能被该类、本包中的类所使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>：被<span class="keyword">static</span>修饰的成员变量可以被类直接使用</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span>:被该修饰符修饰的成员变量是常量</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>C++</title>
    <url>./2022/09/18/C/</url>
    <content><![CDATA[<p>一.第一段程序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二.变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	<span class="comment">//基本变量:</span></span><br><span class="line">        byte num2=<span class="number">35</span>;         <span class="comment">//字节型      1个字节   -128~127</span></span><br><span class="line">        <span class="type">short</span> num3=<span class="number">50</span>;        <span class="comment">//短整型      2个字节   -32768~32767</span></span><br><span class="line">    	<span class="type">unsigned</span> <span class="type">short</span> num7=<span class="number">8</span> <span class="comment">//           1个字节</span></span><br><span class="line">        <span class="type">int</span> num1=<span class="number">10</span>;          <span class="comment">//整形        4个字节   -2^31~2^31-1</span></span><br><span class="line">    	<span class="type">unsigned</span> <span class="type">int</span>          <span class="comment">//           4个字节</span></span><br><span class="line">        <span class="type">long</span> num4=<span class="number">3000000L</span>;   <span class="comment">//长整型      4个字节   -2^63~2^63-1      后面要加L</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span>         <span class="comment">//           4个字节</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span>             <span class="comment">//           8个字节</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>    <span class="comment">//           8个字节</span></span><br><span class="line">    	<span class="type">float</span> num5=<span class="number">2.5F</span>;      <span class="comment">//单精度浮点数  4个字节   1.4013E-45~3.4028E+38  后边要加F</span></span><br><span class="line">        <span class="type">double</span> num6=<span class="number">1.2</span>;      <span class="comment">//双精度浮点型   8个字节  4.9E-324~1.7977E+308</span></span><br><span class="line">        <span class="type">long</span> <span class="type">double</span>           <span class="comment">//                     12个字节</span></span><br><span class="line">    	<span class="type">char</span> zifu1=<span class="string">&#x27;S&#x27;</span>;       <span class="comment">//字符型        1个字节  0~65535</span></span><br><span class="line">    	<span class="type">signed</span> <span class="type">char</span> zifu2=<span class="string">&#x27;s&#x27;</span> <span class="comment">//             1个字节</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> zifu3=<span class="string">&#x27;s&#x27;</span><span class="comment">//            1个字节</span></span><br><span class="line">        <span class="type">wchar_t</span> zifu4=<span class="string">&#x27;s&#x27;</span>      <span class="comment">//             2个字节</span></span><br><span class="line">        <span class="type">bool</span> var1=<span class="literal">true</span>;        <span class="comment">//布尔类型      1个字节  true false</span></span><br><span class="line">                               <span class="comment">//*            8字节</span></span><br><span class="line">    	<span class="comment">//复合变量:</span></span><br><span class="line">    	<span class="type">int</span> num1=<span class="number">12</span>;</span><br><span class="line">    	<span class="type">int</span> &amp;num_1=num1;        <span class="comment">//相当于num1的另一个别名   对num_1的操作相当于对num1的</span></span><br><span class="line">    	<span class="type">int</span> &amp;num_2=<span class="number">12</span>;          <span class="comment">//不可以赋值为具体数</span></span><br><span class="line">    	<span class="type">int</span> *p=&amp;num1            <span class="comment">//指针     NULL:预处理变量 nullptr:特殊类型的字面值</span></span><br><span class="line">        <span class="type">int</span> *&amp;r=&amp;num1           <span class="comment">//指针引用  r相当于p</span></span><br><span class="line">        <span class="comment">//const:</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> num1=<span class="number">1</span>        <span class="comment">//numl不可改变</span></span><br><span class="line">        <span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> num1=<span class="number">1</span> <span class="comment">//其他文件可以访问</span></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> &amp;r1 =num1;    <span class="comment">/* 都是合法的</span></span><br><span class="line"><span class="comment">    	const int &amp;r2 =1;        因为相当于const int &amp;r =temp;  指向了一个临时量 </span></span><br><span class="line"><span class="comment">    	const int &amp;r3 =num1*2;  */</span></span><br><span class="line">    	<span class="type">const</span> <span class="type">int</span> *p1=&amp;num1;	<span class="comment">//p1 是int常量的指针   底层const                指针常量意味着指针不能变</span></span><br><span class="line">    	<span class="type">int</span> *<span class="type">const</span> p2=&amp;num1;	<span class="comment">//p2 是一个int的常量指针   顶层const             指向int常量意味着 指针不能改变指向的内容的值</span></span><br><span class="line">    	<span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p3=&amp;num1;<span class="comment">//p3是一个int常量的常量指针  即时顶层也是底层const          </span></span><br><span class="line">    	<span class="comment">//constexpr:是常量且编译时就能得到结果</span></span><br><span class="line">    	<span class="type">const</span> <span class="type">int</span> *p=&amp;num;		  <span class="comment">//底层const</span></span><br><span class="line">    	<span class="keyword">constexpr</span> <span class="type">int</span> *p=&amp;num;    <span class="comment">//顶层const</span></span><br><span class="line">    	<span class="comment">//类型别名:</span></span><br><span class="line">    	<span class="keyword">typedef</span> <span class="type">int</span> int1;         <span class="comment">//int1是int的同义词</span></span><br><span class="line">    	<span class="keyword">using</span> int1=<span class="type">int</span>;           <span class="comment">//int1是int的同义词</span></span><br><span class="line">    	<span class="keyword">typedef</span> <span class="type">int</span> *int2;        <span class="comment">//意思是int2是一个int的指针类型 相当于int*  但是 const int2 p =&amp;num;</span></span><br><span class="line">    																	   <span class="comment">// const int *p=&amp;num;</span></span><br><span class="line">    								<span class="comment">//                             二者并不相同  前者是顶层const 后者是底层const</span></span><br><span class="line">    	<span class="comment">//auto</span></span><br><span class="line">    	<span class="keyword">auto</span> num1=<span class="number">12</span>;               <span class="comment">//auto会自动识别类型,但是会忽略顶层const</span></span><br><span class="line">    	<span class="type">const</span> <span class="keyword">auto</span> num1=<span class="number">12</span>;         <span class="comment">//需要自己声明</span></span><br><span class="line">    	<span class="comment">//decltype</span></span><br><span class="line">    	<span class="type">int</span> num1 =<span class="number">12</span>;</span><br><span class="line">    	<span class="type">int</span> &amp;num= num1;</span><br><span class="line">    	<span class="keyword">decltype</span> (num1) n;              <span class="comment">// n是int</span></span><br><span class="line">    	<span class="keyword">decltype</span> ((num1)) n;            <span class="comment">//n是int&amp;  即引用</span></span><br><span class="line">    	<span class="keyword">decltype</span> (num)   n;             <span class="comment">//n是int&amp;</span></span><br><span class="line">    	<span class="keyword">decltype</span> (num+<span class="number">0</span>)  n;            <span class="comment">//n是int		</span></span><br><span class="line">        </span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三.数据转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="string">u&#x27;sd&#x27;</span>               <span class="comment">//char12_t</span></span><br><span class="line">        <span class="string">U&#x27;s&#x27;</span>                <span class="comment">//char32_t</span></span><br><span class="line">        <span class="string">L&#x27;s&#x27;</span>                <span class="comment">//wchar_t</span></span><br><span class="line">        <span class="string">u8&#x27;s&#x27;</span>               <span class="comment">//unf-8  char</span></span><br><span class="line">        <span class="number">12u</span>                 <span class="comment">//unsigned</span></span><br><span class="line">        <span class="number">12l</span>                 <span class="comment">//long</span></span><br><span class="line">        <span class="number">12ll</span>                <span class="comment">//long long</span></span><br><span class="line">        <span class="number">12.2f</span>               <span class="comment">//float</span></span><br><span class="line">        <span class="number">12.2l</span>               <span class="comment">//long double</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>四.方法的定义与调用</p>
<p>五.选择语句</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">x <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>         </span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//if:</span></span><br><span class="line">    <span class="keyword">if</span>()                     <span class="comment">//若满足条件则执行后面的语句</span></span><br><span class="line">    &#123;&#125;                 </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>()</span><br><span class="line">    &#123;&#125;                       <span class="comment">//若满足条件则执行后面的语句</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">     <span class="comment">//switch:</span></span><br><span class="line">     <span class="keyword">switch</span>(<span class="number">5</span>)&#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>六.循环语句</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>            </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;           </span><br><span class="line">    <span class="type">int</span> val=<span class="number">0</span>,nums=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//while:</span></span><br><span class="line">    <span class="type">int</span> val=<span class="number">0</span>,nums=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(++val&lt;=<span class="number">10</span>)           <span class="comment">//循环十次</span></span><br><span class="line">    &#123;</span><br><span class="line">        nums+=val;             <span class="comment">// nums = nums + val;</span></span><br><span class="line">        <span class="keyword">if</span>(val==<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;             <span class="comment">//break 跳出循环</span></span><br><span class="line">        <span class="keyword">if</span>(val==<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">continue</span>;         <span class="comment">//continue 结束本次循环,开始下次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(std::cin&gt;&gt;val)</span><br><span class="line">        nums+=val;            <span class="comment">//循环一直进行直达遇到 文件结束符或者错误</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for循环</span></span><br><span class="line">    <span class="type">int</span> nums=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> val= <span class="number">1</span>;val&lt;=<span class="number">10</span>;++val)</span><br><span class="line">        nums+=val;</span><br><span class="line">    <span class="comment">//do...while:</span></span><br><span class="line">    <span class="keyword">do</span>&#123;&#125;<span class="keyword">while</span>()               <span class="comment">//至少进行一次循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>七.数组</p>
<p>八.类和对象</p>
<p>输入与输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>              <span class="comment">//输入流istream 和输出流ostream</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;                     <span class="comment">//标准库所有的名字都在namespace std 中</span></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;adf&quot;</span>&lt;&lt;std::end1;  <span class="comment">//cout 标准输出  等价于 (std::cout&lt;&lt;&quot;adf&quot;)&lt;&lt;std::end1;  </span></span><br><span class="line">    <span class="type">int</span> n;                      </span><br><span class="line">    std::cin&gt;&gt;v1;                <span class="comment">//cin  标准输入</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;                  <span class="comment">//定义结构体</span></span><br><span class="line">  <span class="type">int</span> id;</span><br><span class="line">   <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span></span>&#123;            </span><br><span class="line">	student st1;</span><br><span class="line">    st1.id=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> head.h                  <span class="comment">//若没有定义则执行    ifdef</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> head.h                  <span class="comment">//定义head.h</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;                 <span class="comment">/*防止重复定义*/</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>matlab</title>
    <url>./2022/09/28/matlab/</url>
    <content><![CDATA[<p>一.清空</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all :清除workspace所以变量.</span><br><span class="line"></span><br><span class="line">clc : 清除命令.</span><br></pre></td></tr></table></figure>

<p>二.注释</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%注释内容</span></span><br></pre></td></tr></table></figure>

<p>三.数据类型</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=<span class="number">3</span>                      <span class="comment">%数字</span></span><br><span class="line">ch=<span class="string">&#x27;a&#x27;</span>                   <span class="comment">%字符</span></span><br><span class="line"><span class="built_in">abs</span>(ch)                  <span class="comment">%ascll码</span></span><br><span class="line">char(<span class="number">97</span>)                 <span class="comment">%ascll为97的字符</span></span><br><span class="line">num2str(<span class="number">65</span>)              <span class="comment">%ans=65</span></span><br><span class="line">name=<span class="string">&#x27;zhangsan&#x27;</span>          <span class="comment">%字符串</span></span><br><span class="line"><span class="built_in">length</span>(name)             <span class="comment">%计算字符串长度</span></span><br><span class="line">A=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> ; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">3</span> <span class="number">2</span> <span class="number">7</span>] <span class="comment">%矩阵</span></span><br><span class="line">B=A&#x27;                     <span class="comment">%矩阵转置</span></span><br><span class="line">C=A(:)                   <span class="comment">%矩阵竖着排列</span></span><br><span class="line">D=inv(A)                 <span class="comment">%矩阵求逆矩阵</span></span><br><span class="line">E=<span class="built_in">zeros</span>(<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>)          <span class="comment">%10行 5列 三维矩阵 数值都为零</span></span><br><span class="line">E(:,:,<span class="number">1</span>) =<span class="built_in">rand</span>(<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line">E(:,:,<span class="number">2</span>) =<span class="built_in">randn</span>(<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line">E(:,:,<span class="number">3</span>) =randi(<span class="number">10</span>,<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line">A=cell(<span class="number">6</span>,<span class="number">6</span>)              <span class="comment">%六行六列元胞数组</span></span><br><span class="line">A=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;=<span class="built_in">eye</span>(<span class="number">3</span>)           <span class="comment">%使得A的一行二列的值为三行三列的单位矩阵</span></span><br><span class="line">A&#123;<span class="number">1</span>,<span class="number">3</span>&#125;=<span class="built_in">magic</span>(<span class="number">5</span>)          <span class="comment">%五行五列的列阵,行列相加值相等</span></span><br><span class="line">B=A&#123;<span class="number">1</span>,<span class="number">3</span>&#125;                 <span class="comment">%赋值</span></span><br><span class="line">books = struct (<span class="string">&#x27;name&#x27;</span>,&#123;&#123;<span class="string">&#x27;zhngsan&#x27;</span>,<span class="string">&#x27;lisi&#x27;</span>&#125;&#125;,<span class="string">&#x27;price&#x27;</span>,[<span class="number">30</span> <span class="number">40</span>])<span class="comment">%结构体</span></span><br><span class="line">books.name(<span class="number">1</span>)            <span class="comment">%取细胞</span></span><br><span class="line">books.name&#123;<span class="number">1</span>&#125;            <span class="comment">%取值</span></span><br></pre></td></tr></table></figure>

<p>四.随机数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rand</span>                     <span class="comment">%0到1伪随机数</span></span><br><span class="line"><span class="built_in">rand</span>(m,n)                <span class="comment">%m行n列0到1伪随机数矩阵</span></span><br><span class="line"><span class="built_in">randn</span>                    <span class="comment">%标准正态分布伪随机数</span></span><br><span class="line"><span class="built_in">rand</span>(m,n)                <span class="comment">%m行n列标准正态分布伪随机数矩阵</span></span><br><span class="line">randi([<span class="built_in">min</span>,<span class="built_in">max</span>])         <span class="comment">%区间内伪随机整数</span></span><br><span class="line">randi([<span class="built_in">min</span>,<span class="built_in">max</span>],m,n)     </span><br></pre></td></tr></table></figure>

<p>五.矩阵</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> ; <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>; <span class="number">3</span> <span class="number">2</span> <span class="number">7</span>] <span class="comment">%矩阵</span></span><br><span class="line">B=A&#x27;                     <span class="comment">%矩阵转置</span></span><br><span class="line">C=A(:)                   <span class="comment">%矩阵竖着排列</span></span><br><span class="line">D=inv(A)                 <span class="comment">%矩阵求逆矩阵</span></span><br><span class="line">E=<span class="number">1</span>:<span class="number">2</span>:<span class="number">9</span>                  <span class="comment">%1到9每隔2去一个数字</span></span><br><span class="line">F=<span class="built_in">repmat</span>(E,<span class="number">3</span>,<span class="number">3</span>)          <span class="comment">%把E矩阵三行三列重复</span></span><br><span class="line">D=<span class="built_in">ones</span>(<span class="number">4</span>,<span class="number">4</span>)              <span class="comment">%四行四列的值为一的矩阵</span></span><br><span class="line">A .* B                   <span class="comment">%对应项相乘</span></span><br><span class="line">A / B                    <span class="comment">%A乘以B的逆</span></span><br><span class="line">A ./ B                   <span class="comment">%对应项相除</span></span><br><span class="line">C=A(<span class="number">3</span>,:)                 <span class="comment">%取A的第三行</span></span><br><span class="line">[m,n] = <span class="built_in">find</span>(A&gt;<span class="number">20</span>)       <span class="comment">%找到A中大于二十的值的序列</span></span><br></pre></td></tr></table></figure>

<p>六.程序结构</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n=<span class="number">1</span>:<span class="number">1</span>:<span class="number">10</span>             <span class="comment">%从1开始每次加1到10为止</span></span><br><span class="line">a=a+n;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n&lt;<span class="number">10</span></span><br><span class="line">n=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> a</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">otherwise</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>七.二维绘图</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">10</span>;</span><br><span class="line">y=<span class="built_in">sin</span>(x);</span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(x,y)</span><br><span class="line">title(<span class="string">&#x27;y=sin(x)&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;sin(x)&#x27;</span>)</span><br><span class="line">xlim([<span class="number">0</span> <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">x=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">20</span>:</span><br><span class="line">y1=<span class="number">200</span>*<span class="built_in">exp</span>(<span class="number">-0.05</span>*x).*<span class="built_in">sin</span>(x):</span><br><span class="line">y2=<span class="number">0.8</span>*<span class="built_in">exp</span>(<span class="number">-0.5</span>*x).*<span class="built_in">sin</span>(<span class="number">10</span>*x):</span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line">[AX,HI,H2]=plotyy(x,y1,x,y2,<span class="string">&#x27;plot&#x27;</span>)                 <span class="comment">%公用一个x轴绘图</span></span><br><span class="line">set (get (AX(<span class="number">1</span>);<span class="string">&#x27;Ylabel&#x27;</span>),<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;Slow Decay&#x27;</span>)</span><br><span class="line">set (get (AX(<span class="number">2</span>);<span class="string">&#x27;Ylabel&#x27;</span>),<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;Fast Decay&#x27;</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;Time (\musec)&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;Multiple Decay Rates&#x27;</span>)</span><br><span class="line">set(H1,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">set(H2,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">50</span>:<span class="number">10</span>*<span class="built_in">pi</span>;</span><br><span class="line"><span class="built_in">plot3</span>(<span class="built_in">sin</span>(t),<span class="built_in">cos</span>(t),t)  <span class="comment">%三维绘图</span></span><br><span class="line">xlabel(<span class="string">&#x27;sin(t)&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;cos(t)&#x27;</span>)</span><br><span class="line">zlabel(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">grid on               <span class="comment">%网格</span></span><br><span class="line">axis square           <span class="comment">%正方体</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>matlab</category>
      </categories>
  </entry>
  <entry>
    <title>mysql</title>
    <url>./2022/10/09/mysql/</url>
    <content><![CDATA[<h3 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h3><h4 id="一-MySQL安装和启动"><a href="#一-MySQL安装和启动" class="headerlink" title="一.MySQL安装和启动"></a>一.MySQL安装和启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.下载官网:MySQL(https://mysql.com/)</span><br><span class="line">2.启动</span><br><span class="line">(1)win+r services.msc</span><br><span class="line">(2)net start mysql80     net stop mysql80  </span><br><span class="line">3.客户端连接</span><br><span class="line">(1)MySQL提供的客户端命令行工具</span><br><span class="line">(2)终端输入 mysql [-h 127.0.0.1] [-P 3306] -u root -p   (需要配置环境变量)</span><br></pre></td></tr></table></figure>

<h4 id="二-SQL语法"><a href="#二-SQL语法" class="headerlink" title="二.SQL语法"></a>二.SQL语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.通用语法</span><br><span class="line">(1)SQL语句可以单行或多行书写，以分号结尾。</span><br><span class="line">(2)SQL语句可以使用空格/缩进来增强语句的可读性</span><br><span class="line">(3)MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。</span><br><span class="line">(4)注释：</span><br><span class="line">单行注释：--注释内容或#注释内容（MySQL特有）</span><br><span class="line">多行注释：/*注释内容*/</span><br><span class="line">2.分类</span><br><span class="line">DDL Data Definition Language 数据定义语言，用来定义数据库对象（数据库，表，字段）</span><br><span class="line">DML Data Manipulation Language 数据操作语言，用来对数据库表中的数据进行增删改</span><br><span class="line">DQL Data Query Language 数据查询语言，用来查询数据库中表的记录</span><br><span class="line">DCL Data Control Language 数据控制语言，用来创建数据库用户、控制数据库的访问权限</span><br><span class="line">3.DDL</span><br><span class="line">(1)查询</span><br><span class="line">查询所有数据库</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">查询当前数据库</span><br><span class="line">SELECT DATABASE()；</span><br><span class="line">创建</span><br><span class="line">CREATE DATABASE [IF NOT EXISTS] 数据库名[DEFAULT CHARSET 字符集][COLLATE 排序规则];</span><br><span class="line">删除</span><br><span class="line">DROP DATABASE [IF EXISTS]数据库名；</span><br><span class="line">使用</span><br><span class="line">USE 数据库名；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询当前数据库所有表</span><br><span class="line">SHOW TABLES;</span><br><span class="line">查询表结构</span><br><span class="line">DESC表名;</span><br><span class="line">查询指定表的建表语句</span><br><span class="line">SHOW CREATE TABLE表名;</span><br><span class="line"></span><br><span class="line">DDL-表操作-创建</span><br><span class="line">CREATE TABLE `表名`（</span><br><span class="line">字段1 字段1类型[COMMENT 字段1注释]，</span><br><span class="line">字段2 字段2类型[COMMENT 字段2注释]，</span><br><span class="line">字段3 字段3类型[COMMENT 字段3注释]，</span><br><span class="line">....</span><br><span class="line">字段n字段n类型[COMMENT 字段n注释]</span><br><span class="line">)[COMMENT 表注释];</span><br><span class="line"></span><br><span class="line">DDL-表操作-修改</span><br><span class="line">添加</span><br><span class="line">ALTER TABLE `表名` ADD 字段名 类型 [COMMENT 注释] [约束];</span><br><span class="line">修改数据类型</span><br><span class="line">ALTER TABLE `表名` MODIFY 字段名 新数据类型（长度）;</span><br><span class="line">修改字段名和字段类型</span><br><span class="line">ALTER TABLE `表名` CHANGE 旧字段名 新字段名 类型（长度）[COMMENT注释]【约束】;</span><br><span class="line">删除字段</span><br><span class="line">ALTER TABLE `表名` drop 字段名;</span><br><span class="line">修改表名</span><br><span class="line">ALTER TABLE `表名` RENAME TO 新表名;</span><br><span class="line">删除表</span><br><span class="line">DROP TABLE [IF EXIST] 表名;</span><br><span class="line">删除指定表,并重新创建表         //用于清空数据</span><br><span class="line">TRUNCATE TABLE 表名;</span><br><span class="line">重命名 ALTER TABLE old RENAME TO new;</span><br><span class="line"></span><br><span class="line">DML-添加数据</span><br><span class="line">INSERT INTO表名(字段名1，字段名2，)VALUES(值1，值2，);</span><br><span class="line">给全部字段添加数据</span><br><span class="line">INSERT INTO表名VALUES(值1，值2,);</span><br><span class="line">批量添加数据</span><br><span class="line">INSERT INT0表名(字段名1，字段名2，)VALUES(随1，值2，…)，(值1，值2，)，(值1，值2，)；</span><br><span class="line">INSERT INTO表名VALUES(值1，值2,)，(值1，值2，)，(值1，值2，);</span><br><span class="line"></span><br><span class="line">DML-修改数据</span><br><span class="line">UPDATE 表名 SET 字段名1=值1，字段名2=值2 [WHERE条件]；</span><br><span class="line"></span><br><span class="line">DML-删除数据</span><br><span class="line">DELETE FROM 表名[WHERE条件];</span><br><span class="line"></span><br><span class="line">DQL-语法</span><br><span class="line">SELECT</span><br><span class="line">	字段列表</span><br><span class="line">FROM</span><br><span class="line">	表名列表</span><br><span class="line">WHERE</span><br><span class="line">	条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">	分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">	分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">	排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">	分页参数</span><br><span class="line">	</span><br><span class="line">DOL-基本查询</span><br><span class="line">1.查询多个字段</span><br><span class="line">SELECT 字段1，字段2，字段3.FROM表名；</span><br><span class="line">SELECT*FROM表名；</span><br><span class="line">2.设置别名</span><br><span class="line">SELECT字段1[AS别名1]，字段2[AS别名2].FROM表名;</span><br><span class="line">3.去除重复记录</span><br><span class="line">SELECT DISTINCT 字段列表 FROM 表名；</span><br><span class="line"></span><br><span class="line">DQL-条件查询</span><br><span class="line">1,语法</span><br><span class="line">SELECT 字段列表 FROM 表名 WHERE 条件列表;</span><br><span class="line"></span><br><span class="line">DQL-聚合函数</span><br><span class="line">1.介绍</span><br><span class="line">将一列数据作为一个整体，进行纵向计算。</span><br><span class="line">2.常见聚合函数</span><br><span class="line">函数     功能</span><br><span class="line">count  统计数量</span><br><span class="line">max    最大值</span><br><span class="line">min    最小值</span><br><span class="line">avg    平均值</span><br><span class="line">sum      求和</span><br><span class="line"></span><br><span class="line">DQL-分组查询</span><br><span class="line">1.语法</span><br><span class="line">SELECT字段列表FROM表名[WHERE条件]GROUP BY分组字段名[HAVING分组后过滤条件];</span><br><span class="line">\G   将每个数据每行输出</span><br><span class="line"></span><br><span class="line">DQL-排序查询</span><br><span class="line">1.语法</span><br><span class="line">SELECT字段列表FROM表名ORDER BY字段1排序方式1，字段2排序方式2;</span><br><span class="line">2.排序方式</span><br><span class="line">ASC:升序（默认值）</span><br><span class="line">DESC:降序</span><br><span class="line"></span><br><span class="line">DQL-分页查询</span><br><span class="line">1.语法</span><br><span class="line">SELECT 字段列表 FROM 表名 LIMT 起始索引，查询记录数；</span><br><span class="line"></span><br><span class="line">DCL-管理用户</span><br><span class="line">1.查询用户</span><br><span class="line">USE mysql;</span><br><span class="line">SELECT * FROM user;</span><br><span class="line">2.创建用户</span><br><span class="line">CREATE USER&#x27;用户名&#x27;@&#x27;主机名&#x27;IDENTIFIED BY&#x27;密码&#x27;；</span><br><span class="line">3.修改用户密码</span><br><span class="line">ALTER USER&#x27;用户名&#x27;@&#x27;主机名&#x27;IDENTIFIED WITH mysgl_native_password BY&#x27;新密码&#x27;；</span><br><span class="line">4.删除用户</span><br><span class="line">DROP USER&#x27;用户名&#x27;@&#x27;主机名&#x27;；</span><br><span class="line"></span><br><span class="line">DCL-权限控制</span><br><span class="line">MySQL中定义了很多种权限，但是常用的就以下几种：</span><br><span class="line">权限					说明</span><br><span class="line">ALL,ALL PRIVILEGES	所有权限</span><br><span class="line">SELECT				查询数据</span><br><span class="line">INSERT				插入数据</span><br><span class="line">UPDATE				修改数据</span><br><span class="line">DELETE				删除数据</span><br><span class="line">ALTER				修改表</span><br><span class="line">DROP				删除数据库/表/视图</span><br><span class="line">CREATE				创建数据库/表</span><br><span class="line"></span><br><span class="line">DCL-权限控制</span><br><span class="line">1.查询权限</span><br><span class="line">SHOW GRANTS FOR&#x27;用户名&#x27;@&#x27;主机名&#x27;；</span><br><span class="line">2.授予权限</span><br><span class="line">GRANT权限列表ON数据库名.表名TO&#x27;用户名&#x27;@&#x27;主机名&#x27;;</span><br><span class="line">3.撤销权限</span><br><span class="line">REVOKE权限列表ON 数据库名.表名FROM‘用户名&#x27;@&#x27;主机名&#x27;；;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/10/09/mysql/Snipaste_2022-10-09_13-15-02.png"></p>
<p><img src="/2022/10/09/mysql/Snipaste_2022-10-09_13-18-11.png"></p>
<p><img src="/2022/10/09/mysql/Snipaste_2022-10-09_13-18-53.png"></p>
<p><img src="/2022/10/09/mysql/Snipaste_2022-10-09_16-32-06.png"></p>
<h4 id="三-函数"><a href="#三-函数" class="headerlink" title="三.函数"></a>三.函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL中内置了很多字符串函数，常用的几个如下：</span><br><span class="line">函数											功能</span><br><span class="line">CONCAT(S1,S2,...Sn)				字符串拼接，将S1,S2,.Sn拼接成一个字符串</span><br><span class="line">LOWER(str)						将字符串str全部转为小写</span><br><span class="line">UPPER(str)						将字符串str全部转为大写</span><br><span class="line">LPAD(str,n,pad)					左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</span><br><span class="line">RPAD(str,n,pad)					右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</span><br><span class="line">TRIM(str)						去掉字符串头部和尾部的空格</span><br><span class="line">SUBSTRING(str,start,len)		返回从字符串str从stat位置起的len个长度的字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常见的数值函数如下：</span><br><span class="line">函数											功能	</span><br><span class="line">CEIL(x)                                     向上取整</span><br><span class="line">FLOOR(x)									向下取整</span><br><span class="line">MOD(x,y)									返回x/y的模</span><br><span class="line">RANDS										返回0~1内的随机数</span><br><span class="line">ROUND(x,y)									求参数x的四舍五入的值，保留y位小数</span><br><span class="line"></span><br><span class="line">常见的日期函数如下：</span><br><span class="line">函数											功能</span><br><span class="line">CURDATE（）								返回当前日期</span><br><span class="line">CURTIME（）								返回当前时间</span><br><span class="line">NOW（）									返回当前日期和时间</span><br><span class="line">YEAR(date)								 获取指定date的年份</span><br><span class="line">MONTH(date)								获取指定date的月份</span><br><span class="line">DAY(date)								获取指定date的日期</span><br><span class="line">DATE ADD(date,INTERVAL expr type)		返回一个日期/时间值加上一个时间间隔eXpr后的时间值</span><br><span class="line">DATEDIFF(date1,date2)					返回起始时间date1和结束时间date2之间的天数</span><br><span class="line"></span><br><span class="line">流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率。</span><br><span class="line">函数											功能</span><br><span class="line">IF(value,t,f)							如果value为true,则返回t,否则返回f</span><br><span class="line">IFNULL(value1,value2)					如果value1不为空，返回value1,否则返回value2</span><br><span class="line">CASE WHEN [val1 THEN [res1]...ELSE default END	如果vall为true,返回resl,.否则返回default默认值</span><br><span class="line">CASE expr WHEN [val THEN [res1]...ELSE default END	如果expr的值等于vall,返回resl,.否则返回default默认值</span><br></pre></td></tr></table></figure>

<h4 id="四-约束"><a href="#四-约束" class="headerlink" title="四.约束"></a>四.约束</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.概念：约束是作用于表中字段上的规侧，用于限制存储在表中的数据。</span><br><span class="line">2.目的：保证数据库中数据的正确、有效性和完整性。</span><br><span class="line">3.分类：</span><br><span class="line">约束						描述										关键字</span><br><span class="line">非空约束			限制该字段的数据不能为nul							NOT NULL</span><br><span class="line">唯一约束			保证该字段的所有数据都是唯一、不重复的					UNIQUE</span><br><span class="line">主键约束			主键是一行数据的唯一标识，要求非空且唯一			PRIMARY KEY</span><br><span class="line">默认约束		保存数据时，如果未指定该字段的值，则采用默认值				DEFAULT</span><br><span class="line">检查约束(8.0.16版本之后)	保证字段值满足某一个条件						CHECK	</span><br><span class="line">外键约束		用来让两张表的数据之间建立连接，保证数据的一致性和完整性		FOREIGN KEY</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">外键约束</span><br><span class="line">●语法</span><br><span class="line">添加外键</span><br><span class="line">CREATE TABLE表名（</span><br><span class="line">字段名 数据类型,</span><br><span class="line">[CONSTRAINT]【外键名称】FOREIGN KEY（外键字段名）REFERENCES主表（主表列名）</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY（外键字段名）REFERENCES 主表（主表列名）；</span><br><span class="line"></span><br><span class="line">外键约束</span><br><span class="line">删除/更新行为</span><br><span class="line">行为													说明</span><br><span class="line">NO ACTION		当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。(与RESTRICT一致)</span><br><span class="line">RESTRICT		当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除制更新。(与NO ACTION一致)</span><br><span class="line">CASCADE		当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。</span><br><span class="line">SET NULL			当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为ul(这就要求该外键允许取ul)</span><br><span class="line">SET DEFAULT			父表有变更时，子表将外键列设置成一个默认的值(Innodb不支持)</span><br><span class="line">ALTER TABLE表名 ADD CONSTRAINT 外键名称 FOREIGN KEY（外键字段）REFERENCES 主表名（主表字段名）ON UPDATE CASCADE ON DELETE CASCADE;</span><br></pre></td></tr></table></figure>

<h4 id="五-多表查询"><a href="#五-多表查询" class="headerlink" title="五.多表查询"></a>五.多表查询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多表关系:</span><br><span class="line">一对一:设立外键且唯一</span><br><span class="line">一对多:在多的一方设外键</span><br><span class="line">多对多:设立中间表,中间表两个外键指向两个表</span><br><span class="line"></span><br><span class="line">多表查询:</span><br><span class="line">select *from 表一,表二;</span><br><span class="line">select *from 表一 ,表二  where 表一.字段=表二.字段;</span><br><span class="line">select 别名一.字段 别名二.字段 from 表一 别名1,表二 别名二 where 别名一.字段=别名二.字段;</span><br><span class="line"></span><br><span class="line">多表查询分类: </span><br><span class="line">自连接:自己和自己</span><br><span class="line">内连接:俩个表交集</span><br><span class="line">(左)右外连接:左(右)表以及两表交集</span><br><span class="line"></span><br><span class="line">内连接查询语法：</span><br><span class="line">隐式内连接</span><br><span class="line">SELECT 字段列表 FROM 表1，表2 WHERE 条件..；</span><br><span class="line">显式内连接</span><br><span class="line">SELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON连接条件...;</span><br><span class="line"></span><br><span class="line">外连接查询语法：</span><br><span class="line">左外连接</span><br><span class="line">SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件...;</span><br><span class="line">相当于查询表1（左表）的所有数据包含表1和表2交集部分的数据</span><br><span class="line">右外连接</span><br><span class="line">SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON条件...;</span><br><span class="line"></span><br><span class="line">连接查询-自连接</span><br><span class="line">自连接查询语法：</span><br><span class="line">SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件。。;</span><br><span class="line">自连接查询，可以是内连接查询，</span><br><span class="line">也可以是外连接查询。</span><br><span class="line"></span><br><span class="line">联合查询-union(去重),union all</span><br><span class="line">对于uion查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</span><br><span class="line">SELECT 字段列表 FROM 表A;</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表Bi;</span><br><span class="line"></span><br><span class="line">子查询</span><br><span class="line">●概念：SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询。</span><br><span class="line">SELECT FROM t1 WHERE column1 (SELECT column1 FROM t2);</span><br><span class="line">子查询外部的语句可以是INSERT/UPDATE/DELETE/SELECT的任何一个。</span><br><span class="line">根据子查询结果不同，分为：</span><br><span class="line">标量子查询（子查询结果为个值）</span><br><span class="line">列子查询（子查询结果为一列</span><br><span class="line">行子查询（子查询结果为一行）</span><br><span class="line">表子查询（子查询结果为多行多列</span><br><span class="line">根据子查询位置，分为：WHERE之后、FROM之后、SELECT之后。</span><br><span class="line"></span><br><span class="line">列子查询</span><br><span class="line">子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。</span><br><span class="line">常用的操作符：IN、NOT IN、ANY、SOME、ALL</span><br><span class="line">操作符									描述</span><br><span class="line">IN									在指定的集合范围之内，多选一</span><br><span class="line">NOT IN								不在指定的集合范围之内</span><br><span class="line">ANY									子查询返回列表中，有任意一个满足即可</span><br><span class="line">SOME								与ANY等同，使用SOME的地方都可以使用ANY</span><br><span class="line">ALL									子查询返回列表的所有值都必须满足</span><br><span class="line"></span><br><span class="line">行子查询</span><br><span class="line">子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</span><br><span class="line">常用的操作符：=、&lt;&gt;、N、NOT IN</span><br><span class="line"></span><br><span class="line">表子查询</span><br><span class="line">子查询返回的结果是多行多列，这种子查询称为表子查询。</span><br><span class="line">常用的操作符：IN</span><br></pre></td></tr></table></figure>

<h4 id="六-事务"><a href="#六-事务" class="headerlink" title="六.事务"></a>六.事务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</span><br><span class="line"></span><br><span class="line">查看/设置事务提交方式</span><br><span class="line">SELECT @@autocommit</span><br><span class="line">SET @@autocommit =0;</span><br><span class="line">提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">回滚事务</span><br><span class="line">ROLLBACK</span><br><span class="line"></span><br><span class="line">事务操作</span><br><span class="line">开启事务</span><br><span class="line">START TRANSACTIONBEGIN</span><br><span class="line">提交事务</span><br><span class="line">COMMIT</span><br><span class="line">回滚事务</span><br><span class="line">ROLLBACK</span><br><span class="line"></span><br><span class="line">事务特性</span><br><span class="line">原子性(Atomicity):事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</span><br><span class="line">一致性(Consistency):事务完成时，必须使所有的数据都保持一致状态。</span><br><span class="line">隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</span><br><span class="line">持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</span><br><span class="line"></span><br><span class="line">并发事务问题</span><br><span class="line">问题												描述</span><br><span class="line">脏读									一个事务读到另外一个事务还没有提交的数据。</span><br><span class="line">不可重复读				一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</span><br><span class="line">幻读								一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影”。</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line">隔离级别						赃读			不可重复读			幻读</span><br><span class="line">Read uncommitted				√				√				√</span><br><span class="line">Read committed					×				√				√</span><br><span class="line">Repeatable Read（默认）			  ×				 ×				  √</span><br><span class="line">Serializable					×				×				×</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看事务隔离级别</span><br><span class="line">SELECT @@TRANSACTION ISOLATION;</span><br><span class="line">-设置事务隔离级别</span><br><span class="line">SET SESSION [GLOBAL TRANSACTION] ISOLATION LEVEL &#123;READ UNCOMMITTED / READ COMMITTED / REPEATABLE READ / SERIALIZABLE&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h3><h4 id="一-存储引擎"><a href="#一-存储引擎" class="headerlink" title="一.存储引擎"></a>一.存储引擎</h4><p><img src="D:\myblog\source_posts\mysql\Snipaste_2022-10-11_19-36-28.png"></p>
<p><img src="D:\myblog\source_posts\mysql\Snipaste_2022-10-11_19-59-24.png"></p>
<p><img src="D:\myblog\source_posts\mysql\Snipaste_2022-10-11_20-08-48.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySOL体系结构</span><br><span class="line">。连接层</span><br><span class="line">最上层是一些客户端和链接服务，主要完成一些类似于连接处理、授权认证、及相关的安全方案。服务器也会为安全接入的每个客户</span><br><span class="line">端验证它所具有的操作权限。</span><br><span class="line">服务层</span><br><span class="line">第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存</span><br><span class="line">储引擎的功能也在这一层实现，如过程、函数等。</span><br><span class="line">引擎层</span><br><span class="line">存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我</span><br><span class="line">们可以根据自己的需要，来选取合适的存储引擎。</span><br><span class="line">·存储层</span><br><span class="line">主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</span><br><span class="line"></span><br><span class="line">存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可被</span><br><span class="line">称为表类型。</span><br><span class="line"></span><br><span class="line">show engines;           查看支持的引擎</span><br><span class="line"></span><br><span class="line">engine = innodb;        在建表语句后加上以指定特定的存储引擎</span><br><span class="line"></span><br><span class="line">●InnoDB</span><br><span class="line">介绍</span><br><span class="line">InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL5.5之后，InnoDB是默认的MySQL存储引擎。</span><br><span class="line">特点</span><br><span class="line">DML操作遵循ACID模型，支持事务；</span><br><span class="line">行级锁，提高并发访问性能；</span><br><span class="line">支持外键FOREIGN KEY约束，保证数据的完整性和正确性；</span><br><span class="line">文件</span><br><span class="line">XXX.ibd:xx代表的是表名，innoDB引擎的每张表都会对应这样一个表空间文件，存储该表的表结构(frm、sdi)、数据和索引。</span><br><span class="line">参数：innodb_file_per_table     show variables like &#x27;innodb_file_per_table&#x27; 默认开启表示每张表的存储引擎不共用</span><br><span class="line">ibd2sdi table.adb         命令行指令查看ibd中的sdi</span><br><span class="line"></span><br><span class="line">●MyISAM</span><br><span class="line">介绍</span><br><span class="line">MyISAM是MySQL早期的默认存储引擎。</span><br><span class="line">特点</span><br><span class="line">不支持事务，不支持外键</span><br><span class="line">支持表锁，不支持行锁</span><br><span class="line">访问速度快</span><br><span class="line">文件</span><br><span class="line">XXx.Sdi:存储表结构信息</span><br><span class="line">XXX.MYD:存储数据</span><br><span class="line">XXX.MYI:存储索引</span><br><span class="line"></span><br><span class="line">Memory</span><br><span class="line">介绍</span><br><span class="line">Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。</span><br><span class="line">特点</span><br><span class="line">内存存放</span><br><span class="line">hash索引（默认）</span><br><span class="line">文件</span><br><span class="line">XX.sdi:：存储表结构信息</span><br><span class="line"></span><br><span class="line">在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组</span><br><span class="line">合。</span><br><span class="line">&gt;InnoDB:是Mysq的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致</span><br><span class="line">性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDBi存储引擎是比较合适的选择。</span><br><span class="line">&gt;MyISAM：如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那</span><br><span class="line">么选择这个存储引擎是非常合适的。</span><br><span class="line">&gt;MEMORY:将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表</span><br><span class="line">无法缓存在内存中，而且无法保障数据的安全性。</span><br></pre></td></tr></table></figure>

<h4 id="二-索引"><a href="#二-索引" class="headerlink" title="二.索引"></a>二.索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1·介绍</span><br><span class="line">索引(1ndex)是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些</span><br><span class="line">数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</span><br><span class="line"></span><br><span class="line">优缺点       </span><br><span class="line"> 				优势											劣势</span><br><span class="line">提高数据检索的效率，降低数据库的I/O成本						索引列也是要占用空间的。</span><br><span class="line">通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗		索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行															INSERT、UPDATE、DELETE时，效率降低。</span><br><span class="line"></span><br><span class="line">2.MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下几种：</span><br><span class="line">索引结												描述</span><br><span class="line">B+Tree索引						最常见的索引类型，大部分引擎都支持B+树索引</span><br><span class="line">Hash索引				底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效不支持范围查询</span><br><span class="line">R-tree（空间索引）		空间索引是ySAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</span><br><span class="line">Ful-text（全文索引）		是一种通过建立倒排索引，快速匹配文档的方式。类似于Lucene,Solr,ES</span><br><span class="line"></span><br><span class="line">索引        INNODB      MYISAM      MEMORY</span><br><span class="line">B+Tree索引	支持		支持			支持</span><br><span class="line">Hash索引		不支持		不支持			支持</span><br><span class="line">R-tree		不支持		  支持		不支持</span><br><span class="line">Ful-text	5.6后支持	  支持		不支持</span><br><span class="line"></span><br><span class="line">3.索引分类						</span><br><span class="line">分类							含义					特点					关键字</span><br><span class="line">主键索引				针对于表中主键创建的索引	默认自动创建，只能有一个	PRIMARY</span><br><span class="line">唯一索引			避免同一个表中某数据列中的值重复		可以有多个			UNIQUEa</span><br><span class="line">常规索引				快速定位特定数据					可以有案个		</span><br><span class="line">全文索引	全文索引查找的是文本中的关键词，而不是比较索引中的值	可以有多个		FULLTEXT</span><br><span class="line"></span><br><span class="line">4.索引语法</span><br><span class="line">。创建索引</span><br><span class="line">CREATE [UNIQUE] [FULLTEXT] INDEX index_name ON table_name (index_col_name,...);</span><br><span class="line">·查看索引</span><br><span class="line">SHOW INDEX FROM table_name;</span><br><span class="line">●删除索引</span><br><span class="line">DROP INDEX index name ON table name;</span><br><span class="line"></span><br><span class="line">5.SQL性能分析</span><br><span class="line">SQL执行频率</span><br><span class="line">MySQL客户端连接成功后，通过show[session|global]status命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的INSERT、UPDATE、DELETE、SELECT的访问频次：</span><br><span class="line">SHOW GLOBAL STATUS LIKE &#x27;Com_______&#x27;  七个_</span><br><span class="line"></span><br><span class="line">●慢查询日志</span><br><span class="line">慢查询日志记录了所有执行时间超过指定参数(long_query_.time,单位：秒，默认10秒)的所有SQL语句的日志。</span><br><span class="line">show variables like &#x27;slow_query_log&#x27;  查看状态 </span><br><span class="line">MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件(/etc/my.cnf)中配置如下信息：</span><br><span class="line">#开启MySOL慢日志查询开关</span><br><span class="line">slow_query_log=1</span><br><span class="line">#设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span><br><span class="line">long query time=2</span><br><span class="line">配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息var/lib/mysql/localhost-slow.log.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">profile详情</span><br><span class="line">show profiles能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。通过have profiling参数，能够看到当前MySQL是否支持</span><br><span class="line">profile操作：</span><br><span class="line">SELECT @@have profiling</span><br><span class="line">SELECT @@profiling</span><br><span class="line">默认orofiling是关闭的，可以通过set语句在session/.global级别开启profiling:</span><br><span class="line">SET profiling =1;</span><br><span class="line"></span><br><span class="line">执行一系列的业务SQL的操作，然后通过如下指令查看指令的执行耗时：</span><br><span class="line">#查看每一条SQL的耗时基本情况</span><br><span class="line">show profiles;</span><br><span class="line">#查看指定query id的SQL语句各个阶段的耗时情况</span><br><span class="line">show profile for query query_id;</span><br><span class="line">#查看指定query id的SQL语句CPU的使用情况</span><br><span class="line">show profile cpu for query query_id;</span><br><span class="line"></span><br><span class="line">explain执行计划</span><br><span class="line">EXPLAIN或者DESC命令获取MySQL如何执行SELECT语句的信息，包括在SELECT语句执行过程中表如何连接和连接的顺序。</span><br><span class="line">语法：</span><br><span class="line">#直接在selecti语句之前加上关键字explain/desc</span><br><span class="line">EXPLAIN SELECT字段列表FROM表名WHERE条件；</span><br><span class="line"></span><br><span class="line">explain执行计划</span><br><span class="line">EXPLAIN执行计划各字段含义：</span><br><span class="line">ld</span><br><span class="line">selecti查询的序列号，表示查询中执行select-子句或者是操作表的顺序（id相同，执行顺序从上到下；id不同，值越大，越先执行</span><br><span class="line">select type</span><br><span class="line">表示SELECT的类型，常见的取值有SIMPLE(简单表，即不使用表连接或者子查询)、PRIMARY(主查询，即外层的查询)、UNION(UNION中的第二个或者后面的查询语句)、SUBQUERY(SELECT/WHERE之后包含了子查询)等</span><br><span class="line">type</span><br><span class="line">表示连接类型，性能由好到差的连接类型为NULL、system、const、eq_ref、ref、range、index、all.</span><br><span class="line">possible key</span><br><span class="line">显示可能应用在这张表上的索引，一个或多个。</span><br><span class="line">Key</span><br><span class="line">实际使用的索引，如果为NULL,则没有使用索引。</span><br><span class="line">Key_len</span><br><span class="line">表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好。</span><br><span class="line">rows</span><br><span class="line">MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不总是准确的。</span><br><span class="line">filtered</span><br><span class="line">表示返回结果的行数占需读取行数的百分比，filtered的值越大越好。</span><br><span class="line"></span><br><span class="line">6.索引使用</span><br><span class="line">最左前缀法则</span><br><span class="line">如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</span><br><span class="line">·范围查询</span><br><span class="line">联合索引中，出现范围查询(&gt;，&lt;)，范围查询右侧的列索引失效</span><br><span class="line">explain select*from tb user where profession=&#x27;软件工程&#x27;and age&gt;30 and status=&#x27;o&#x27;;</span><br><span class="line">explain select*from tb_uer where profession=&#x27;软件工程&#x27;and age&gt;=30 and status=&#x27;o&#x27;;</span><br><span class="line"></span><br><span class="line">索引列运算</span><br><span class="line">不要在索引列上进行运算操作，索引将失效。</span><br><span class="line">字符串不加引号</span><br><span class="line">字符串类型字段使用时，不加引号，索引将失效。</span><br><span class="line">模糊查询</span><br><span class="line">如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</span><br><span class="line">or连接的条件</span><br><span class="line">用o分割开的条件，如果o前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</span><br><span class="line">数据分布影响</span><br><span class="line">如果MySQL评估使用索引比全表更慢，则不使用索引。</span><br><span class="line">●</span><br><span class="line">SQL提示</span><br><span class="line">SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</span><br><span class="line">use index:</span><br><span class="line">explain select*from tb user use index(索引名称)where 条件；    建议</span><br><span class="line">ignore index:</span><br><span class="line">explain select*from tb user ignore index(索引名称)where 条件&#x27;；  忽略</span><br><span class="line">force index:</span><br><span class="line">explain select*from tb user force index(索引名称)where 条件；   强制</span><br><span class="line">覆盖索引</span><br><span class="line">尽量使用覆盖索引(查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到)，减少sect*。</span><br><span class="line">●</span><br><span class="line">前缀索引</span><br><span class="line">当字段类型为字符串(varchar,text等)时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO,影响查</span><br><span class="line">询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</span><br><span class="line">语法</span><br><span class="line">create index idx xxxx on table name(column(n));</span><br><span class="line">前缀长度</span><br><span class="line">可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，</span><br><span class="line">唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。</span><br><span class="line">select count(distinct email)/count(*)from tb user</span><br><span class="line">select count(distinct substring(email,1,5))/count(*)from tb user</span><br><span class="line">·单列索引与联合索引</span><br><span class="line">单列索引：即一个索引只包含单个列。</span><br><span class="line">联合索引：即一个索引包含了多个列。</span><br><span class="line">在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</span><br><span class="line"></span><br><span class="line">索引设计原则</span><br><span class="line">1.针对于数据量较大，且查询比较频繁的表建立索引。</span><br><span class="line">2.针对于常作为查询条件(where)、排序(order by)、分组(group by)操作的字段建立索引。</span><br><span class="line">3.尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</span><br><span class="line">4.如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</span><br><span class="line">5.尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</span><br><span class="line">6.要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</span><br><span class="line">7.如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个</span><br><span class="line">索引最有效地用于查询。</span><br></pre></td></tr></table></figure>

<h4 id="三-mysql优化"><a href="#三-mysql优化" class="headerlink" title="三.mysql优化"></a>三.mysql优化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插入数据</span><br><span class="line">insert优化</span><br><span class="line">批量插入</span><br><span class="line">Insert into tb_test values(1Tom2）.（2，cat2).(3,jerny）；</span><br><span class="line">手动提交事务</span><br><span class="line">start transaction；</span><br><span class="line">insert into tb_test values(i,Tom2）.（2,Cat）.（3,Jerny）</span><br><span class="line">insert into tb_test values(4.Tom）.(5，Cat）.（6,Jerry）；</span><br><span class="line">insert into tb_test values(7.Tom）.（8.Cat）.（9,jerry）</span><br><span class="line">commit</span><br><span class="line">主键顺序插入</span><br><span class="line">主键乱序插入： 8 1 9 21 88 2 4 5 89 5 7 3</span><br><span class="line">主键顺序插入 1 2 3 4 5 8 9 5 21 88 89</span><br><span class="line">大批量插入数据</span><br><span class="line">如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的oad指令进行插入。操作如下：</span><br><span class="line">#客户端连接服务端时，加上参数-loca-infile</span><br><span class="line">mysql--local-infile -u root -p</span><br><span class="line">#设置全局参数local infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local infile =1;</span><br><span class="line">#执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &#x27;/root/sql1.log&#x27;into table tb_user&#x27;fields terminated by &#x27;,lines terminated by &#x27;\n&#x27;;</span><br><span class="line"></span><br><span class="line">主键优化</span><br><span class="line">·数据组织方式</span><br><span class="line">在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表(index organized table IOT)。</span><br><span class="line">页分裂</span><br><span class="line">页可以为空，也可以填充一半，也可以填充100%。每个页包含了2-N行数据(如果一行数据多大，会行溢出)，根据主键排列。</span><br><span class="line">·页合并</span><br><span class="line">当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记(flaged)为删除并且它的空间变得允许被其他记录声明使用。</span><br><span class="line">当页中删除的记录达到MERGE THRESHOLD(默认为页的50%),InnoDB会开始寻找最靠近的页（前或后）看看是否可以将两个页合并以优</span><br><span class="line">化空间使用。</span><br><span class="line">主键设计原则</span><br><span class="line">满足业务需求的情况下，尽量降低主键的长度。</span><br><span class="line">插入数据时，尽量选择顺序插入，选择使用AUTO INCREMENT自增主键。</span><br><span class="line">尽量不要使用UUD做主键或者是其他自然主键，如身份证号。</span><br><span class="line">业务操作时，避免对主键的修改。</span><br><span class="line"></span><br><span class="line">order by优化</span><br><span class="line">①.Using filesort:通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直</span><br><span class="line">接返回排序结果的排序都I叫FileSort排序。</span><br><span class="line">②.Using index:通过有序索引顺序扫描直接返回有序数据，这种情况即为using index,.不需要额外排序，操作效率高。</span><br><span class="line">#没有创建索引时，根据age,phone进行排序</span><br><span class="line">explain select id,age,phone from tb_user order by age,phone;</span><br><span class="line">#创建索引</span><br><span class="line">create index idx user age phone aa on tb user(age,phone);</span><br><span class="line">#创建索引后，根据age,phone进行升序排序</span><br><span class="line">explain select id,age,phone from tb_user order by age,phone;</span><br><span class="line">#创建索引后，根据age,phonei进行降序排序</span><br><span class="line">explain select id,age,phone from tb user order by age desc,phone desc</span><br><span class="line">#根据age,phone进行降序一个升序，一个降序</span><br><span class="line">explain select id,age,phone from tb_user order by age asc,phone desc;</span><br><span class="line">#创建索引</span><br><span class="line">create index idx user age phone ad on tb user(age asc ,phone desc);</span><br><span class="line">#根据age,phone进行降序一个升序，一个降序</span><br><span class="line">explain select id,age,phone from tb user order by age asc,phone desc;</span><br><span class="line"></span><br><span class="line">&gt;根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则。</span><br><span class="line">&gt;尽量使用覆盖索引。</span><br><span class="line">&gt;多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则(ASC/DESC).</span><br><span class="line">&gt;如果不可避免的出现filesort,大数据量排序时，可以适当增大排序缓冲区大小sort buffer size(默认256k)。</span><br><span class="line"></span><br><span class="line">group by 优化`</span><br><span class="line">&gt;在分组操作时，可以通过索引来提高效率</span><br><span class="line">&gt;分组操作时，索引的使用也是满足最左前缀法则的。</span><br><span class="line"></span><br><span class="line">imit优化</span><br><span class="line">一个常见又非常头疼的问题就是imit2000000,10,此时需要M小ySQL排序前2000010记录，仅仅返回2000000-2000010</span><br><span class="line">的记录，其他记录丢弃，查询排序的代价非常大。</span><br><span class="line">优化思路：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化。</span><br><span class="line"></span><br><span class="line">count优化</span><br><span class="line">●&gt;MyISAM引擎把一个表的总行数存在了磁盘上，因此执行count(*)的时候会直接返回这个数，效率很高；</span><br><span class="line">&gt;InnoDB引擎就麻烦了，它执行count(*)的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。</span><br><span class="line">count的几种用法</span><br><span class="line">cout()是一个聚合函数，对于返回的结果集，一行行地判断，如果count函数的参数不是NULL,累计值就加1，否则不加，最后返回累计值。</span><br><span class="line">count（主键）</span><br><span class="line">InnoDB引擎会遍历整张表，把每一行的主键id值都取出来，返回给服务层。服务层拿到主键后，直接按行进行累加(主键不可能为u).</span><br><span class="line">count（字段）</span><br><span class="line">没有not null约束：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为nu,不为nul,计数累加。</span><br><span class="line">有not null约束：InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加。</span><br><span class="line">count (1)</span><br><span class="line">InnoDB引擎遍历整张表，但不取值。服务层对于返回的每一行，放一个数字&quot;1”进去，直接按行进行累加。</span><br><span class="line">count (*</span><br><span class="line">IoDB引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加。</span><br><span class="line">按照效率排序的话，count（字段）&lt;count(主键id)&lt;count(1)≈count(*),所以尽量使用count(*)。</span><br><span class="line"></span><br><span class="line">update优化</span><br><span class="line">InnoDB的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</span><br></pre></td></tr></table></figure>

<h4 id="三-视图-存储过程-触发器"><a href="#三-视图-存储过程-触发器" class="headerlink" title="三.视图/存储过程/触发器"></a>三.视图/存储过程/触发器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">视图</span><br><span class="line">创建</span><br><span class="line">CREATE[OR REPLACE]VIEW视图名称（列名列表）AS SELECT语句[WITH[CASCADED I LOCAL] CHECK OPTION]</span><br><span class="line">查询</span><br><span class="line">查看创建视图语句：SHOW CREATE VIEW视图名称；</span><br><span class="line">查看视图数据：SELECT*FROM视图名称…；</span><br><span class="line">修改R</span><br><span class="line">方式一：CREATE[OR REPLACE]VIEW视图名称[（列名列表）]AS SELECTi语句[WITH[CASCADED|LOCAL]CHECK OPTION]</span><br><span class="line">方式二：ALTER VIEW视图名称（列名列表）】AS SELECTi语句[WITH[CASCADED|LOCAL]CHECK OPTION]</span><br><span class="line">删除</span><br><span class="line">DROP VIEW[IF EXISTS]视图名称[，视图名称]....</span><br><span class="line">·视图的检查选项</span><br><span class="line">当使用WITH CHECK OPTION子句创建视图时，MySQL会通过视图检查正在更改的每个行，例如插入，更新，删除，以使其符合视图的定</span><br><span class="line">义。MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。为了确定检查的范围，ysql提供了两个选项：</span><br><span class="line">CASCADED和LOCAL,默认值为CASCADED。</span><br><span class="line">CASCADED会检查所有依赖的视图的条件</span><br><span class="line">local 检查不检查条件取决于依赖的视图是否定义了条件</span><br><span class="line"></span><br><span class="line">。视图的更新</span><br><span class="line">要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。如果视图包含以下任何一项，则该视图不可更新：</span><br><span class="line">1.聚合函数或窗口函数(SUM()、MIN()、MAX、COUNT()等)</span><br><span class="line">2.DISTINCT</span><br><span class="line">3.GROUP BY</span><br><span class="line">4.HAVING</span><br><span class="line">5.UNION或者UNION ALL</span><br><span class="line">●</span><br><span class="line">作用</span><br><span class="line">简单</span><br><span class="line">视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作</span><br><span class="line">每次指定全部的条件。</span><br><span class="line">安全</span><br><span class="line">数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据</span><br><span class="line">数据独立</span><br><span class="line">视图可帮助用户屏蔽真实表结构变化带来的影响。</span><br><span class="line"></span><br><span class="line">存储过程</span><br><span class="line">·介绍</span><br><span class="line">存储过程是事先经过编译并存储在数据库中的一段SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据</span><br><span class="line">库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</span><br><span class="line">存储过程思想上很简单，就是数据库SQL语言层面的代码封装与重用。</span><br><span class="line">特点</span><br><span class="line">封装，复用</span><br><span class="line">可以接收参数，也可以返回数据</span><br><span class="line">减少网络交互，效率提升</span><br><span class="line"></span><br><span class="line">创建</span><br><span class="line">CREATE PROCEDURE存储过程名称(I参数列表])</span><br><span class="line">BEGIN</span><br><span class="line">-SQL语句</span><br><span class="line">END;</span><br><span class="line">调用</span><br><span class="line">CALL名称(【参数】)：</span><br><span class="line">查看</span><br><span class="line">SELECT*FROM INFORMATION SCHEMA.ROUTINES WHERE ROUTINE SCHEMA=&#x27;Xx&#x27;;-查询指定数据库的存储过程及状态信息</span><br><span class="line">SHOW CREATE PROCEDURE存储过程名称；-查询某个存储过程的定义</span><br><span class="line">删除</span><br><span class="line">DROP PROCEDURE[IF EXISTS]存储过程名称；</span><br><span class="line">注意：在命令行中，执行创建存储过程的SQL时，需要通过关键字delimiter指定SQL语句的结束符。</span><br><span class="line"></span><br><span class="line">变量</span><br><span class="line">系统变量是MySQL服务器提供，不是用户定义的，属于服务器层面。分为全局变量(GLOBAL)、会话变量(SESSION).</span><br><span class="line">查看系统变量</span><br><span class="line">SHOW [SESSION] [GLOBAL] VARIABLES</span><br><span class="line">-查看所有系统变量</span><br><span class="line">SHOW[SESSION][ GLOBAL]VARIABLES LIKE&#x27;;一可以通过LIKE模糊匹配方式查找变量</span><br><span class="line">SELECT@@[SESSION|GLOBAL]系统变量名：</span><br><span class="line">查看指定变量的值</span><br><span class="line">设置系统变量</span><br><span class="line">SET[SESSION I GLOBAL]系统变量名=值；</span><br><span class="line">SET@@[SESSION|GLOBAL]系统变量名=值：</span><br><span class="line">注意：</span><br><span class="line">如果没有指定SESSION/GLOBAL,默认是SESSION,会话变量。</span><br><span class="line">mysq服务重新启动之后，所设置的全局参数会失效，要想不失效，可以在/etc/my.cn中配置</span><br><span class="line"></span><br><span class="line">·变量</span><br><span class="line">用户定义变量是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用“@变量名”使用就可以。其作用域为当前连接。</span><br><span class="line">&gt;赋值</span><br><span class="line">SET @var name=expr [@var_name expr]...;</span><br><span class="line">SET @var name:=expr [@var name:=expr]...;</span><br><span class="line">SELECT @var name :=expr [@var name:=expr]...;</span><br><span class="line">SELECT字段名INTO@var name FROM表名;</span><br><span class="line">使用</span><br><span class="line">SELECT @var name;</span><br><span class="line"></span><br><span class="line">局部变量是根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明。可用作存储过程内的局部变量和输入参数，局部变量</span><br><span class="line">的范围是在其内声明的BEGIN.END块。</span><br><span class="line">声明</span><br><span class="line">DECLARE变量名 变量类型 [DEFAULT];</span><br><span class="line">变量类型就是数据库字段类型：INT、BIGINT、CHAR、VARCHAR、DATE、TIME等。</span><br><span class="line">赋值</span><br><span class="line">SET变量名=值；</span><br><span class="line">SET变量名：=值；</span><br><span class="line">SELECT字段名INTO变量名FROM表名；</span><br><span class="line"></span><br><span class="line">。if</span><br><span class="line">语法：</span><br><span class="line">IF条件1THEN</span><br><span class="line">ELSEIF条件2 THEN    -可选</span><br><span class="line">ELSE               -可选</span><br><span class="line">END IF;</span><br><span class="line"></span><br><span class="line">·参数</span><br><span class="line">类型                 含义                     备注</span><br><span class="line">IN    该类参数作为输入，也就是需要调用时传入值      默认</span><br><span class="line">ouT  该类参数作为输出，也就是该参数可以作为返回值</span><br><span class="line">INOUT  既可以作为输入参数，也可以作为输出参数</span><br><span class="line"></span><br><span class="line">case</span><br><span class="line">语法一</span><br><span class="line">CASE case value</span><br><span class="line">[WHEN when value1 THEN statement list1]</span><br><span class="line">[WHEN when value2 THEN statement list 2]...</span><br><span class="line">[ELSE statement list]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line">语法二</span><br><span class="line">CASE</span><br><span class="line">WHEN search condition1 THEN statement list1....</span><br><span class="line">[WHEN search condition2 THEN statement list2]...</span><br><span class="line">[ELSE statement list]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line">while</span><br><span class="line">while循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句。具体语法为：</span><br><span class="line">#先判定条件，如果条件为tue,则执行逻辑，否则，不执行逻辑</span><br><span class="line">WHILE条件DO</span><br><span class="line">SQL逻辑</span><br><span class="line">END WHILE;</span><br><span class="line"></span><br><span class="line">repeat</span><br><span class="line">repeat是有条件的循环控制语句，当满足条件的时候退出循环。具体语法为：</span><br><span class="line">#先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出。如果不满足，则继续下一次循环</span><br><span class="line">REPEAT</span><br><span class="line">SQL逻辑...</span><br><span class="line">UNTIL条件</span><br><span class="line">END REPEAT;</span><br><span class="line"></span><br><span class="line">loop</span><br><span class="line">LOOP实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。LOOP可以配合一下两个语句使用：</span><br><span class="line">LEAVE:配合循环使用，退出循环。</span><br><span class="line">TERATE:必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。</span><br><span class="line">begin label:LOOP</span><br><span class="line">SQL逻辑...</span><br><span class="line">END LOOP [end label];</span><br><span class="line">LEAVE label;-退出指定标记的循环体</span><br><span class="line">TERATE label;-直接进入下一次循环</span><br><span class="line"></span><br><span class="line">·游标</span><br><span class="line">游标(CUSO)是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标</span><br><span class="line">的声明、OPEN、FETCH和CLOSE,其语法分别如下。</span><br><span class="line">&gt;声明游标</span><br><span class="line">DECLARE游标名称CURSOR FOR查询语句；</span><br><span class="line">&gt;打开游标</span><br><span class="line">OPEN游标名称；</span><br><span class="line">&gt;获取游标记录</span><br><span class="line">FETCH游标名称INTO变量【变量】；</span><br><span class="line">&gt;关闭游标</span><br><span class="line">CLOSE游标名称；</span><br><span class="line"></span><br><span class="line">条件处理程序</span><br><span class="line">条件处理程序(Handler)可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。具体语法为：</span><br><span class="line">DECLARE handler action HANDLER FOR condition value [condition value]...statement</span><br><span class="line">handler action</span><br><span class="line">CONTINUE:继续执行当前程序</span><br><span class="line">EXIT:终止执行当前程序</span><br><span class="line">condition_value</span><br><span class="line">SQLSTATE sqlstate value:状态码，如02000</span><br><span class="line">SQLWARNING:所有以01开头的SQLSTATE代码的简写</span><br><span class="line">NOT FOUND:所有以O2开头的SOLSTATE代码的简写</span><br><span class="line">SQLEXCEPTION:所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE代码的简写</span><br><span class="line"></span><br><span class="line">存储函数是有返回值的存储过程，存储函数的参数只能是IN类型的。具体语法如下：</span><br><span class="line">CREATE FUNCTION存储函数名称(L参数列表])</span><br><span class="line">RETURNS type [characteristic]</span><br><span class="line">BEGIN</span><br><span class="line">-</span><br><span class="line">SQL语句</span><br><span class="line">RETURN ...</span><br><span class="line">END;</span><br><span class="line">characteristici说明：</span><br><span class="line">DETERMINISTIC:相同的输入参数总是产生相同的结果</span><br><span class="line">NO SQL:不包含SQL语句。</span><br><span class="line">READS SQL DATA:包含读取数据的语句，但不包含写入数据的语句。</span><br><span class="line"></span><br><span class="line">触发器</span><br><span class="line">·介绍</span><br><span class="line">触发器是与表有关的数据库对象，指在insert/update/delete之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作</span><br><span class="line">使用别名OLD和NEW来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发</span><br><span class="line"></span><br><span class="line">触发器类型                                              NEW和OLD</span><br><span class="line">INSERT型触发器                             NEW表示将要或者已经新增的数据</span><br><span class="line">UPDATE型触发器             OLD表示修改之前的数据，NEW表示将要或已经修改后的数据</span><br><span class="line">DELETE3型触发器                                    OLD表示将要或者已经删除的数据</span><br><span class="line"></span><br><span class="line">·语法</span><br><span class="line">&gt;创建</span><br><span class="line">CREATE TRIGGER trigger_name</span><br><span class="line">BEFORE/AFTER INSERT/UPDATE/DELETE</span><br><span class="line">ON tbl name FOR EACH ROW-行级触发器</span><br><span class="line">BEGIN</span><br><span class="line">trigger_stmt;</span><br><span class="line">END;</span><br><span class="line">&gt;</span><br><span class="line">查看</span><br><span class="line">SHOW TRIGGERS</span><br><span class="line">&gt;</span><br><span class="line">删除</span><br><span class="line">DROP TRIGGER[schema name.]trigger name;-如果没有指定schema name,默认为当前数据库。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
